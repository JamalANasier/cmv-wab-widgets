{"version":3,"sources":["Identify.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","MenuItem","lang","array","all","topic","query","domStyle","domClass","Moveable","Memory","IdentifyTask","IdentifyParameters","PopupTemplate","FeatureLayer","TimeExtent","IdentifyTemplate","i18n","Formatters","widgetsInTemplate","templateString","baseClass","mapClickMode","identifies","infoTemplates","featureLayers","ignoreOtherGraphics","createDefaultInfoTemplates","draggable","layerSeparator","allLayersId","excludedFields","defaultFormatters","esriFieldTypeSmallInteger","formatInt","esriFieldTypeInteger","esriFieldTypeSingle","formatFloat","esriFieldTypeDouble","esriFieldTypeDate","formatDate","postCreate","this","inherited","arguments","layers","addLayerInfos","layerInfos","own","subscribe","hitch","map","on","evt","executeIdentifyTask","mapRightClickMenu","addRightClickMenu","parentWidget","createIdentifyLayerList","setupDraggable","forEach","addLayerInfo","layerInfo","infoTemplate","lyrId","layer","id","getLayer","url","declaredClass","capabilities","indexOf","toLowerCase","getInfoTemplate","layerId","setInfoTemplate","fieldInfos","info","formatters","filter","length","lastSL","lastIndexOf","substring","subLayerInfo","subLayerId","layerIds","getFeatureLayerForDynamicSublayer","push","ref","identifyTask","visible","mapRightClick","addChild","label","rightClickMenuItem","onClick","popups","handles","pointers","movable","set","handle","onMoveStart","pointer","remove","checkForGraphicInfoTemplate","infoWindow","hide","clearFeatures","shiftKey","ctrlKey","altKey","mapPoint","identifyParams","createIdentifyParams","identifiedlayers","selectedLayer","getSelectedLayer","getLayerIds","params","clone","layerDefinitions","timeInfo","timeExtent","startTime","endTime","execute","setTitle","mapInfoWindow","identifyingTitle","setContent","show","then","graphic","_layer","hasOwnProperty","isNaN","point","tolerance","identifyTolerance","returnGeometry","layerOption","LAYER_OPTION_VISIBLE","geometry","mapExtent","extent","width","height","spatialReference","form","identifyFormDijit","get","identifyLayer","identifyLayerDijit","arrIds","split","selectedIds","getLayerInfos","includeSubLayer","identifyCallback","responseArray","fSet","response","i","result","feature","undefined","showAttachments","getFormattedFeature","setFeatures","formatter","attributes","fieldName","identifyError","err","publish","source","error","handleRightClick","popup","config","ids","mixin","createDefaultInfoTemplate","content","layerName","getLayerName","prop","addDefaultFieldInfo","makeSentenceCase","_outFields","fields","foundField","field","name","alias","title","str","replace","charAt","toUpperCase","substr","join","nameLC","identifyItems","selectedId","sep","sort","a","b","unshift","labels","allVisibleLayers","identify","data","subLayerIds","isDefaultLayerVisibility","checkVisibilityRecursive","visibleLayers","layerVisibleAtCurrentScale","parentLayerId","item","defaultVisibility","lyr","_titleForLegend","key","mapScale","getScale","maxScale","minScale","setMapClickMode","mode","graphicsLayerIds","layerID"],"mappings":"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","file":"Identify.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dijit/_WidgetsInTemplateMixin',\r\n    'dijit/MenuItem',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/promise/all',\r\n    'dojo/topic',\r\n    'dojo/query',\r\n    'dojo/dom-style',\r\n    'dojo/dom-class',\r\n    'dojo/dnd/Moveable',\r\n    'dojo/store/Memory',\r\n    'esri/tasks/IdentifyTask',\r\n    'esri/tasks/IdentifyParameters',\r\n    'esri/dijit/PopupTemplate',\r\n    'esri/layers/FeatureLayer',\r\n    'esri/TimeExtent',\r\n    'dojo/text!./Identify/templates/Identify.html',\r\n    'dojo/i18n!./Identify/nls/resource',\r\n    './Identify/Formatters',\r\n\r\n    'dijit/form/Form',\r\n    'dijit/form/FilteringSelect',\r\n    'xstyle/css!./Identify/css/Identify.css'\r\n], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, MenuItem, lang, array, all, topic, query, domStyle, domClass, Moveable, Memory, IdentifyTask, IdentifyParameters, PopupTemplate, FeatureLayer, TimeExtent, IdentifyTemplate, i18n, Formatters) {\r\n\r\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n        widgetsInTemplate: true,\r\n        templateString: IdentifyTemplate,\r\n        baseClass: 'gis_IdentifyDijit',\r\n        i18n: i18n,\r\n\r\n        mapClickMode: null,\r\n        identifies: {},\r\n        infoTemplates: {},\r\n        featureLayers: {},\r\n        ignoreOtherGraphics: true,\r\n        createDefaultInfoTemplates: true,\r\n        draggable: false,\r\n        layerSeparator: '||',\r\n        allLayersId: '***',\r\n        excludedFields: [\r\n            'objectid', 'esri_oid', 'shape',\r\n            'shape.len', 'shape_length',\r\n            'shape_len', 'shape.stlength()',\r\n            'shape.area', 'shape_area', 'shape.starea()'\r\n        ],\r\n        /**\r\n         * field type mappings to their default formatter functions\r\n         * overriding this object will globally replace the default\r\n         * formatter function for the field type\r\n         * @type {Object<Function>}\r\n         */\r\n        defaultFormatters: {\r\n            'esriFieldTypeSmallInteger': Formatters.formatInt,\r\n            'esriFieldTypeInteger': Formatters.formatInt,\r\n            'esriFieldTypeSingle': Formatters.formatFloat,\r\n            'esriFieldTypeDouble': Formatters.formatFloat,\r\n            'esriFieldTypeDate': Formatters.formatDate\r\n        },\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            if (!this.identifies) {\r\n                this.identifies = {};\r\n            }\r\n            this.layers = [];\r\n            this.addLayerInfos(this.layerInfos);\r\n\r\n            this.own(topic.subscribe('mapClickMode/currentSet', lang.hitch(this, 'setMapClickMode')));\r\n            this.own(topic.subscribe('identify/addLayerInfos', lang.hitch(this, 'addLayerInfos')));\r\n\r\n            this.map.on('click', lang.hitch(this, function (evt) {\r\n                if (this.mapClickMode === 'identify') {\r\n                    this.executeIdentifyTask(evt);\r\n                }\r\n            }));\r\n            if (this.mapRightClickMenu) {\r\n                this.addRightClickMenu();\r\n            }\r\n\r\n            // rebuild the layer selection list when the map is updated\r\n            // but only if we have a UI\r\n            if (this.parentWidget) {\r\n                this.createIdentifyLayerList();\r\n                this.map.on('update-end', lang.hitch(this, function () {\r\n                    this.createIdentifyLayerList();\r\n                }));\r\n            }\r\n\r\n            if (this.draggable) {\r\n                this.setupDraggable();\r\n            }\r\n        },\r\n        /**\r\n         * handles an array of layerInfos to call addLayerInfo for each layerInfo\r\n         * @param {Array<layerInfo>} layerInfos The array of layer infos\r\n         * @returns {undefined}\r\n         */\r\n        addLayerInfos: function (layerInfos) {\r\n            array.forEach(layerInfos, lang.hitch(this, 'addLayerInfo'));\r\n        },\r\n        /**\r\n         * Initializes an infoTemplate on a layerInfo.layer object if it doesn't\r\n         * exist already.\r\n         * @param {object} layerInfo A cmv layerInfo object that contains a layer property\r\n         * @return {undefined}\r\n         */\r\n        addLayerInfo: function (layerInfo) {\r\n            var lyrId = layerInfo.layer.id, layer = this.map.getLayer(lyrId), infoTemplate;\r\n            if (layer) {\r\n                var url = layer.url;\r\n\r\n                // handle feature layers\r\n                if (layer.declaredClass === 'esri.layers.FeatureLayer') {\r\n\r\n                    // If is a feature layer that does not support\r\n                    // Identify (Feature Service), create an\r\n                    // infoTemplate for the graphic features. Create\r\n                    // it only if one does not already exist.\r\n                    if (layer.capabilities && array.indexOf(layer.capabilities.toLowerCase(), 'data') < 0) {\r\n                        if (!layer.infoTemplate) {\r\n                            infoTemplate = this.getInfoTemplate(layer, layer.layerId);\r\n                            if (infoTemplate) {\r\n                                layer.setInfoTemplate(infoTemplate);\r\n                                var fieldInfos = infoTemplate.info.fieldInfos;\r\n                                var formatters = array.filter(fieldInfos, function (info) {\r\n                                    return (info.formatter);\r\n                                });\r\n                                if (formatters.length > 0) {\r\n                                    layer.on('graphic-draw', lang.hitch(this, 'getFormattedFeature', layer.infoTemplate));\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // If it is a feature Layer, we get the base url\r\n                    // for the map service by removing the layerId.\r\n                    var lastSL = url.lastIndexOf('/' + layer.layerId);\r\n                    if (lastSL > 0) {\r\n                        url = url.substring(0, lastSL);\r\n                    }\r\n                } else if (layer.layerInfos) {\r\n                    array.forEach(layer.layerInfos, lang.hitch(this, function (subLayerInfo) {\r\n                        var subLayerId = subLayerInfo.id;\r\n                        if ((layerInfo.layerIds === null) || (array.indexOf(layerInfo.layerIds, subLayerId) >= 0)) {\r\n                            this.getFeatureLayerForDynamicSublayer(layer, subLayerId);\r\n                        }\r\n                    }));\r\n                }\r\n\r\n                this.layers.push({\r\n                    ref: layer,\r\n                    layerInfo: layerInfo,\r\n                    identifyTask: new IdentifyTask(url)\r\n                });\r\n\r\n                // rebuild the layer selection list when any layer is hidden\r\n                // but only if we have a UI\r\n                if (this.parentWidget) {\r\n                    layer.on('visibility-change', lang.hitch(this, function (evt) {\r\n                        if (evt.visible === false) {\r\n                            this.createIdentifyLayerList();\r\n                        }\r\n                    }));\r\n                }\r\n            }\r\n        },\r\n        addRightClickMenu: function () {\r\n            this.map.on('MouseDown', lang.hitch(this, function (evt) {\r\n                this.mapRightClick = evt;\r\n            }));\r\n            this.mapRightClickMenu.addChild(new MenuItem({\r\n                label: this.i18n.rightClickMenuItem.label,\r\n                onClick: lang.hitch(this, 'handleRightClick')\r\n            }));\r\n        },\r\n        setupDraggable: function () {\r\n            var popups, handles, pointers, movable;\r\n            // the popup, handle (title) and pointers (arrows)\r\n            popups = query('div.esriPopup');\r\n            handles = query('div.esriPopup div.titlePane div.title');\r\n            pointers = query('div.esriPopup div.outerPointer, div.esriPopup div.pointer');\r\n\r\n            if (popups.length > 0 && handles.length > 0) {\r\n                domStyle.set(handles[0], 'cursor', 'move');\r\n                movable = new Moveable(popups[0], {\r\n                    handle: handles[0]\r\n                });\r\n\r\n                if (pointers.length > 0) {\r\n                    // hide the pointer arrow when you move the popup\r\n                    movable.onMoveStart = function () {\r\n                        array.forEach(pointers, function (pointer) {\r\n                            domClass.remove(pointer, 'left right top bottom topLeft topRight bottomLeft bottomRight');\r\n                        });\r\n                    };\r\n                }\r\n            }\r\n        },\r\n        executeIdentifyTask: function (evt) {\r\n            if (!this.checkForGraphicInfoTemplate(evt)) {\r\n                return;\r\n            }\r\n\r\n            this.map.infoWindow.hide();\r\n            this.map.infoWindow.clearFeatures();\r\n\r\n            // don't identify on shift-click, ctrl-click or alt-click\r\n            if (evt.shiftKey || evt.ctrlKey || evt.altKey) {\r\n                return;\r\n            }\r\n\r\n            var mapPoint = evt.mapPoint;\r\n            var identifyParams = this.createIdentifyParams(mapPoint);\r\n            var identifies = [];\r\n            var identifiedlayers = [];\r\n            var selectedLayer = this.getSelectedLayer();\r\n\r\n            array.forEach(this.layers, lang.hitch(this, function (layer) {\r\n                var layerIds = this.getLayerIds(layer, selectedLayer);\r\n                if (layerIds.length > 0) {\r\n                    var params = lang.clone(identifyParams);\r\n                    params.layerDefinitions = layer.ref.layerDefinitions;\r\n                    params.layerIds = layerIds;\r\n                    if (layer.ref.timeInfo && layer.ref.timeInfo.timeExtent && this.map.timeExtent) {\r\n                        params.timeExtent = new TimeExtent(this.map.timeExtent.startTime, this.map.timeExtent.endTime);\r\n                    }\r\n                    identifies.push(layer.identifyTask.execute(params));\r\n                    identifiedlayers.push(layer);\r\n                }\r\n            }));\r\n\r\n            if (identifies.length > 0) {\r\n                this.map.infoWindow.setTitle(this.i18n.mapInfoWindow.identifyingTitle);\r\n                this.map.infoWindow.setContent('<div class=\"loading\"></div>');\r\n                this.map.infoWindow.show(mapPoint);\r\n                all(identifies).then(lang.hitch(this, 'identifyCallback', identifiedlayers), lang.hitch(this, 'identifyError'));\r\n            }\r\n        },\r\n\r\n        checkForGraphicInfoTemplate: function (evt) {\r\n            if (evt.graphic) {\r\n                // handle feature layers that come from a feature service\r\n                // and may already have an info template\r\n                var layer = evt.graphic._layer;\r\n                if (layer.infoTemplate || (layer.capabilities && array.indexOf(layer.capabilities.toLowerCase(), 'data') < 0)) {\r\n                    return false;\r\n                }\r\n\r\n                if (!this.ignoreOtherGraphics) {\r\n                    // handles graphic from another type of graphics layer\r\n                    // added to the map and so the identify is not found\r\n                    if (!this.identifies.hasOwnProperty(layer.id)) {\r\n                        return false;\r\n                    }\r\n                    // no layerId (graphics) or sublayer not defined\r\n                    if (isNaN(layer.layerId) || !this.identifies[layer.id].hasOwnProperty(layer.layerId)) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        createIdentifyParams: function (point) {\r\n            var identifyParams = new IdentifyParameters();\r\n            identifyParams.tolerance = this.identifyTolerance;\r\n            identifyParams.returnGeometry = true;\r\n            identifyParams.layerOption = IdentifyParameters.LAYER_OPTION_VISIBLE;\r\n            identifyParams.geometry = point;\r\n            identifyParams.mapExtent = this.map.extent;\r\n            identifyParams.width = this.map.width;\r\n            identifyParams.height = this.map.height;\r\n            identifyParams.spatialReference = this.map.spatialReference;\r\n\r\n            return identifyParams;\r\n        },\r\n\r\n        getSelectedLayer: function () {\r\n            var selectedLayer = this.allLayersId; // default is all layers\r\n            // if we have a UI, then get the selected layer\r\n            if (this.parentWidget) {\r\n                var form = this.identifyFormDijit.get('value');\r\n                if (!form.identifyLayer || form.identifyLayer === '') {\r\n                    this.identifyLayerDijit.set('value', selectedLayer);\r\n                } else {\r\n                    selectedLayer = form.identifyLayer;\r\n                }\r\n            }\r\n            return selectedLayer;\r\n        },\r\n\r\n        getLayerIds: function (layer, selectedLayer) {\r\n            var arrIds = selectedLayer.split(this.layerSeparator);\r\n            var allLayersId = this.allLayersId;\r\n            var ref = layer.ref,\r\n                selectedIds = layer.layerInfo.layerIds;\r\n            var layerIds = [];\r\n            if (ref.visible) {\r\n                if (arrIds[0] === allLayersId || ref.id === arrIds[0]) {\r\n                    if (arrIds.length > 1 && arrIds[1]) { // layer explicity requested\r\n                        layerIds = [arrIds[1]];\r\n                    } else if ((ref.declaredClass === 'esri.layers.FeatureLayer') && !isNaN(ref.layerId)) { // feature layer\r\n                        // do not allow feature layer that does not support\r\n                        // Identify (Feature Service)\r\n                        if (ref.capabilities && array.indexOf(ref.capabilities.toLowerCase(), 'data') >= 0) {\r\n                            layerIds = [ref.layerId];\r\n                        }\r\n                    } else if (ref.layerInfos) {\r\n                        layerIds = this.getLayerInfos(ref, selectedIds);\r\n                    }\r\n                }\r\n            }\r\n            return layerIds;\r\n        },\r\n\r\n        getLayerInfos: function (ref, selectedIds) {\r\n            var layerIds = [];\r\n            array.forEach(ref.layerInfos, lang.hitch(this, function (layerInfo) {\r\n                if (!this.includeSubLayer(layerInfo, ref, selectedIds)) {\r\n                    return;\r\n                }\r\n                layerIds.push(layerInfo.id);\r\n            }));\r\n            return layerIds;\r\n\r\n        },\r\n\r\n        identifyCallback: function (identifiedlayers, responseArray) {\r\n            var fSet = [];\r\n            array.forEach(responseArray, function (response, i) {\r\n                var ref = identifiedlayers[i].ref;\r\n                array.forEach(response, function (result) {\r\n                    result.feature.geometry.spatialReference = this.map.spatialReference; //temp workaround for ags identify bug. remove when fixed.\r\n                    if (result.feature.infoTemplate === undefined) {\r\n                        var infoTemplate = this.getInfoTemplate(ref, null, result);\r\n                        if (infoTemplate) {\r\n                            if (result.layerId && ref.layerInfos && infoTemplate.info.showAttachments) {\r\n                                result.feature._layer = this.getFeatureLayerForDynamicSublayer(ref, result.layerId);\r\n                            }\r\n                            result.feature.setInfoTemplate(infoTemplate);\r\n                        } else {\r\n                            return;\r\n                        }\r\n                    }\r\n                    var feature = this.getFormattedFeature(result.feature.infoTemplate, result.feature);\r\n                    fSet.push(feature);\r\n                }, this);\r\n            }, this);\r\n            this.map.infoWindow.setFeatures(fSet);\r\n        },\r\n        getFormattedFeature: function (infoTemplate, feature) {\r\n            if (feature.graphic) {\r\n                feature = feature.graphic;\r\n            }\r\n            if (feature && infoTemplate && infoTemplate.info) {\r\n                array.forEach(infoTemplate.info.fieldInfos, function (info) {\r\n                    if (typeof info.formatter === 'function') {\r\n                        feature.attributes[info.fieldName] = info.formatter(feature.attributes[info.fieldName], feature.attributes, lang.clone(feature.geometry));\r\n                    }\r\n                });\r\n            }\r\n            return feature;\r\n        },\r\n        identifyError: function (err) {\r\n            this.map.infoWindow.hide();\r\n            topic.publish('viewer/handleError', {\r\n                source: 'Identify',\r\n                error: err\r\n            });\r\n        },\r\n        handleRightClick: function () {\r\n            this.executeIdentifyTask(this.mapRightClick);\r\n        },\r\n\r\n        getInfoTemplate: function (layer, layerId, result) {\r\n            var popup, config;\r\n            if (result) {\r\n                layerId = result.layerId;\r\n            } else if (layerId === null) {\r\n                layerId = layer.layerId;\r\n            }\r\n\r\n            var ids = this.identifies;\r\n            if (ids.hasOwnProperty(layer.id)) {\r\n                if (ids[layer.id].hasOwnProperty(layerId)) {\r\n                    popup = ids[layer.id][layerId];\r\n                    if (popup instanceof PopupTemplate) {\r\n                        return popup;\r\n                    }\r\n                }\r\n            } else {\r\n                ids[layer.id] = {};\r\n            }\r\n\r\n            // by mixin in the users config with the default props we can\r\n            // generate a config object that provides the basics automatically\r\n            // while letting the user override only the parts they want...like mediaInfos\r\n            config = lang.mixin(this.createDefaultInfoTemplate(layer, layerId, result), ids[layer.id][layerId] || {});\r\n\r\n            popup = ids[layer.id][layerId] = new PopupTemplate(config);\r\n            if (config.content) {\r\n                popup.setContent(config.content);\r\n            }\r\n\r\n            return ids[layer.id][layerId];\r\n        },\r\n\r\n        createDefaultInfoTemplate: function (layer, layerId, result) {\r\n            var popup = null,\r\n                fieldInfos = [];\r\n\r\n            var layerName = this.getLayerName(layer);\r\n            if (result) {\r\n                layerName = result.layerName;\r\n            }\r\n\r\n            // from the results\r\n            if (result && result.feature) {\r\n                var attributes = result.feature.attributes;\r\n                if (attributes) {\r\n                    for (var prop in attributes) {\r\n                        if (attributes.hasOwnProperty(prop)) {\r\n                            this.addDefaultFieldInfo(fieldInfos, {\r\n                                fieldName: prop,\r\n                                label: this.makeSentenceCase(prop),\r\n                                visible: true\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // from the outFields of the layer\r\n            } else if (layer._outFields && (layer._outFields.length) && (layer._outFields[0] !== '*')) {\r\n\r\n                var fields = layer.fields;\r\n                array.forEach(layer._outFields, lang.hitch(this, function (fieldName) {\r\n                    var foundField = array.filter(fields, function (field) {\r\n                        return (field.name === fieldName);\r\n                    });\r\n                    if (foundField.length > 0) {\r\n                        this.addDefaultFieldInfo(fieldInfos, {\r\n                            fieldName: foundField[0].name,\r\n                            label: foundField[0].alias,\r\n                            visible: true\r\n                        });\r\n                    }\r\n                }));\r\n\r\n                // from the fields layer\r\n            } else if (layer.fields) {\r\n\r\n                array.forEach(layer.fields, lang.hitch(this, function (field) {\r\n                    this.addDefaultFieldInfo(fieldInfos, {\r\n                        fieldName: field.name,\r\n                        label: field.alias === field.name ? this.makeSentenceCase(field.name) : field.alias,\r\n                        visible: true\r\n                    });\r\n                }));\r\n            }\r\n\r\n            if (fieldInfos.length > 0) {\r\n                popup = {\r\n                    title: layerName,\r\n                    fieldInfos: fieldInfos,\r\n                    showAttachments: (layer.hasAttachments)\r\n                };\r\n            }\r\n\r\n            return popup;\r\n        },\r\n        /**\r\n         * converts a string to a nice sentence case format\r\n         * @url http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\r\n         * @param  {string} str The string to convert\r\n         * @return {string}     The converted string\r\n         */\r\n        makeSentenceCase: function (str) {\r\n            if (!str.length) {\r\n                return '';\r\n            }\r\n            str = str.toLowerCase().replace(/_/g, ' ').split(' ');\r\n            for (var i = 0; i < str.length; i++) {\r\n                str[i] = str[i].charAt(0).toUpperCase() + (str[i].substr(1).length ? str[i].substr(1) : '');\r\n            }\r\n            return (str.length ? str.join(' ') : str);\r\n        },\r\n\r\n        addDefaultFieldInfo: function (fieldInfos, field) {\r\n            var nameLC = field.fieldName.toLowerCase();\r\n            if (array.indexOf(this.excludedFields, nameLC) < 0) {\r\n                fieldInfos.push(field);\r\n            }\r\n        },\r\n\r\n        createIdentifyLayerList: function () {\r\n            var id = null;\r\n            var identifyItems = [];\r\n            var selectedId = this.identifyLayerDijit.get('value');\r\n            var sep = this.layerSeparator;\r\n\r\n            array.forEach(this.layers, lang.hitch(this, function (layer) {\r\n                var ref = layer.ref,\r\n                    selectedIds = layer.layerInfo.layerIds;\r\n                // only include layers that are currently visible\r\n                if (ref.visible) {\r\n                    var name = this.getLayerName(layer);\r\n                    if ((ref.declaredClass === 'esri.layers.FeatureLayer') && !isNaN(ref.layerId)) { // feature layer\r\n                        identifyItems.push({\r\n                            name: name,\r\n                            id: ref.id + sep + ref.layerId\r\n                        });\r\n                        // previously selected layer is still visible so keep it selected\r\n                        if (ref.id + sep + ref.layerId === selectedId) {\r\n                            id = selectedId;\r\n                        }\r\n                    } else { // dynamic layer\r\n                        array.forEach(ref.layerInfos, lang.hitch(this, function (layerInfo) {\r\n                            if (!this.includeSubLayer(layerInfo, ref, selectedIds)) {\r\n                                return;\r\n                            }\r\n                            identifyItems.push({\r\n                                name: name + ' \\\\ ' + layerInfo.name,\r\n                                id: ref.id + sep + layerInfo.id\r\n                            });\r\n                            // previously selected sublayer is still visible so keep it selected\r\n                            if (ref.id + sep + layerInfo.id === selectedId) {\r\n                                id = selectedId;\r\n                            }\r\n                        }));\r\n                    }\r\n                }\r\n            }));\r\n\r\n            identifyItems.sort(function (a, b) {\r\n                return (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0);\r\n            });\r\n\r\n            this.identifyLayerDijit.set('disabled', (identifyItems.length < 1));\r\n            if (identifyItems.length > 0) {\r\n                identifyItems.unshift({\r\n                    name: this.i18n.labels.allVisibleLayers,\r\n                    id: '***'\r\n                });\r\n                if (!id) {\r\n                    id = identifyItems[0].id;\r\n                }\r\n            }\r\n            var identify = new Memory({\r\n                data: identifyItems\r\n            });\r\n            this.identifyLayerDijit.set('store', identify);\r\n            this.identifyLayerDijit.set('value', id);\r\n        },\r\n\r\n        includeSubLayer: function (layerInfo, ref, selectedIds) {\r\n            // exclude group layers\r\n            if (layerInfo.subLayerIds !== null) {\r\n                return false;\r\n            }\r\n\r\n            if (this.isDefaultLayerVisibility(ref) && !this.checkVisibilityRecursive(ref, layerInfo.id)) {\r\n                return false;\r\n            } else if (array.indexOf(ref.visibleLayers, layerInfo.id) < 0) {\r\n                return false;\r\n            }\r\n            // only include sublayers that are within the current map scale\r\n            if (!this.layerVisibleAtCurrentScale(layerInfo)) {\r\n                return false;\r\n            }\r\n\r\n            // restrict which layers are included\r\n            if (selectedIds) {\r\n                if (array.indexOf(selectedIds, layerInfo.id) < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // don't allow the layer if we don't have an  infoTemplate\r\n            // already and creating a default one is not desired\r\n            if (!this.createDefaultInfoTemplates) {\r\n                var infoTemplate = this.getInfoTemplate(ref, layerInfo.id);\r\n                if (!infoTemplate) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            // all tests pass so include this sublayer\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * recursively check all a layer's parent(s) layers for visibility\r\n         * this only needs to be done if the layers visibleLayers array is\r\n         * set to the default visibleLayers. After setVisibleLayers\r\n         * is called the first time group layers are NOT included.\r\n         * @param  {esri/layers/DynamicMapServiceLayer} layer The layer reference\r\n         * @param  {Integer} id   The sublayer id to check for visibility\r\n         * @return {Boolean}      Whether or not the sublayer is visible based on its parent(s) visibility\r\n         */\r\n        checkVisibilityRecursive: function (layer, id) {\r\n            var layerInfos = array.filter(layer.layerInfos, function (layerInfo) {\r\n                return (layerInfo.id === id);\r\n            });\r\n            if (layerInfos.length > 0) {\r\n                var info = layerInfos[0];\r\n                if (layer.visibleLayers.indexOf(id) !== -1 &&\r\n                    (info.parentLayerId === -1 || this.checkVisibilityRecursive(layer, info.parentLayerId))) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * check each defaultVisibility and if its not in the visibleLayers\r\n         * array, then the layer has non-default layer visibility\r\n         * @param  {esri/layers/DynamicMapServiceLayer} layer The layer reference\r\n         * @return {Boolean}       Whether or not we're operating with the default visibleLayers array or not\r\n         */\r\n        isDefaultLayerVisibility: function (layer) {\r\n            for (var i = 0; i < layer.layerInfos.length; i++) {\r\n                var item = layer.layerInfos[i];\r\n                if (item.defaultVisibility && layer.visibleLayers.indexOf(item.id) === -1) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        getLayerName: function (layer) {\r\n            var name = null;\r\n            if (layer.layerInfo) {\r\n                name = layer.layerInfo.title;\r\n            }\r\n            if (!name) {\r\n                array.forEach(this.layers, function (lyr) {\r\n                    if (lyr.ref.id === layer.id) {\r\n                        name = lyr.layerInfo.title;\r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            if (!name) {\r\n                name = layer.name;\r\n                if (!name && layer.ref) {\r\n                    name = layer.ref._titleForLegend; // fall back to old method using title from legend\r\n                }\r\n            }\r\n            return name;\r\n        },\r\n\r\n        getFeatureLayerForDynamicSublayer: function (layer, layerId) {\r\n            if (!layer.layerInfos) {\r\n                return false;\r\n            }\r\n            var key = layer.url + '/' + layerId;\r\n            if (!this.featureLayers.hasOwnProperty(key)) {\r\n                this.featureLayers[key] = new FeatureLayer(key);\r\n            }\r\n            return this.featureLayers[key];\r\n        },\r\n\r\n        layerVisibleAtCurrentScale: function (layer) {\r\n            var mapScale = this.map.getScale();\r\n            return !(((layer.maxScale !== 0 && mapScale < layer.maxScale) || (layer.minScale !== 0 && mapScale > layer.minScale)));\r\n        },\r\n\r\n        setMapClickMode: function (mode) {\r\n            this.mapClickMode = mode;\r\n            var map = this.map;\r\n            array.forEach(map.graphicsLayerIds, function (layerID) {\r\n                var layer = map.getLayer(layerID);\r\n                if (layer) {\r\n                    // add back any infoTemplates that\r\n                    // had been previously removed\r\n                    if (mode === 'identify') {\r\n                        if (this.infoTemplates[layer.id]) {\r\n                            layer.infoTemplate = lang.clone(this.infoTemplates[layer.id]);\r\n                        }\r\n                    // remove any infoTemplates that might\r\n                    // interfere with clicking on a feature\r\n                    } else if (layer.infoTemplate) {\r\n                        this.infoTemplates[layer.id] = lang.clone(layer.infoTemplate);\r\n                        layer.infoTemplate = null;\r\n                    }\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});"]}