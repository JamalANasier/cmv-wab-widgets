{"version":3,"sources":["Dynamic.js"],"names":["define","declare","lang","array","aspect","topic","query","domConst","domAttr","registry","_WidgetBase","_TemplatedMixin","_Contained","MenuItem","MenuSeparator","_Control","DynamicSublayer","DynamicFolder","legendUtil","i18n","DynamicControl","_layerType","_esriLayerType","_hasSublayers","_visLayersHandler","constructor","this","_sublayerControls","_layerTypePreInit","layer","layerInfos","length","controlOptions","sublayers","after","hitch","_layerTypeInit","isLegend","noLegend","controller","_expandClick","_createSublayers","dynamicSublayerLegend","expandNode","layerLegend","_expandRemove","_dynamicToggleMenuItems","menu","allSublayerToggles","addChild","label","dynamicSublayersOn","onClick","dynamicSublayersOff","forEach","_addMenuItem","menuItem","item","set","publish","subLayer","iconNode","_toggleAllSublayers","state","control","_setSublayerCheckbox","_setVisibleLayers","allLayers","map","l","id","info","sublayerInfo","filter","subLayerInfos","sli","shift","mixin","pid","parentLayerId","slids","subLayerIds","controlId","indexOf","icons","place","domNode","byId","startup","push","_removeSublayerLegends","destroy","expandClickNode","remove","setLayers","i","get","parseInt","sub","splice","setVisibleLayers","refresh","visibleLayers","_onSetVisibleLayers","visLayers","visibleIds"],"mappings":"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","file":"Dynamic.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/aspect',\r\n    'dojo/topic',\r\n    'dojo/query',\r\n    'dojo/dom-construct',\r\n    'dojo/dom-attr',\r\n    'dijit/registry',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dijit/_Contained',\r\n    'dijit/MenuItem',\r\n    'dijit/MenuSeparator',\r\n    './_Control', // layer control base class\r\n    './_DynamicSublayer',\r\n    './_DynamicFolder',\r\n    './../plugins/legendUtil',\r\n    'dojo/i18n!./../nls/resource'\r\n], function (\r\n    declare,\r\n    lang,\r\n    array,\r\n    aspect,\r\n    topic,\r\n    query,\r\n    domConst,\r\n    domAttr,\r\n    registry,\r\n    _WidgetBase,\r\n    _TemplatedMixin,\r\n    _Contained,\r\n    MenuItem,\r\n    MenuSeparator,\r\n    _Control, // most everything happens here\r\n    DynamicSublayer,\r\n    DynamicFolder,\r\n    legendUtil,\r\n    i18n\r\n) {\r\n\r\n    var DynamicControl = declare([_WidgetBase, _TemplatedMixin, _Contained, _Control], {\r\n        _layerType: 'overlay', // constant\r\n        _esriLayerType: 'dynamic', // constant\r\n        //_sublayerControls: [], // sublayer/folder controls\r\n        _hasSublayers: false, // true when sublayers created\r\n        _visLayersHandler: null,\r\n        constructor: function () {\r\n            this._sublayerControls = [];\r\n        },\r\n        _layerTypePreInit: function () {\r\n            if (this.layer.layerInfos.length > 1 && this.controlOptions.sublayers) {\r\n                // we have sublayer controls\r\n                this._hasSublayers = true;\r\n                this._visLayersHandler = aspect.after(this.layer, 'setVisibleLayers', lang.hitch(this, '_onSetVisibleLayers'), true);\r\n            }\r\n        },\r\n        // create sublayers and legend\r\n        _layerTypeInit: function () {\r\n            var isLegend = legendUtil.isLegend(this.controlOptions.noLegend, this.controller.noLegend);\r\n            if (isLegend && this.controlOptions.sublayers === true) {\r\n                this._expandClick();\r\n                this._createSublayers(this.layer);\r\n                aspect.after(this, '_createSublayers', lang.hitch(this, legendUtil.dynamicSublayerLegend(this.layer, this.expandNode)));\r\n            } else if (this.controlOptions.sublayers === false && isLegend) {\r\n                this._expandClick();\r\n                legendUtil.layerLegend(this.layer, this.expandNode);\r\n            } else if (this.controlOptions.sublayers === true && !isLegend) {\r\n                this._expandClick();\r\n                aspect.after(this, '_createSublayers', lang.hitch(this, '_removeSublayerLegends'));\r\n                this._createSublayers(this.layer);\r\n            } else {\r\n                this._expandRemove();\r\n            }\r\n        },\r\n        // called from LayerMenu plugin\r\n        _dynamicToggleMenuItems: function (menu) {\r\n            if (this._hasSublayers && this.controlOptions.allSublayerToggles !== false) {\r\n                menu.addChild(new MenuItem({\r\n                    label: i18n.dynamicSublayersOn,\r\n                    onClick: lang.hitch(this, '_toggleAllSublayers', true)\r\n                }));\r\n                menu.addChild(new MenuItem({\r\n                    label: i18n.dynamicSublayersOff,\r\n                    onClick: lang.hitch(this, '_toggleAllSublayers', false)\r\n                }));\r\n                menu.addChild(new MenuSeparator());\r\n            }\r\n\r\n            // add custom sublayer menu items if we only have one sublayer\r\n            if (!this._hasSublayers) {\r\n                array.forEach(this.controlOptions.menu, lang.hitch(this, '_addMenuItem', menu));\r\n            }\r\n        },\r\n        _addMenuItem: function (menu, menuItem) {\r\n            //create the menu item\r\n            var item = new MenuItem(menuItem);\r\n            item.set('onClick', lang.hitch(this, function () {\r\n                topic.publish('layerControl/' + menuItem.topic, {\r\n                    layer: this.layer,\r\n                    subLayer: this.layer.layerInfos[0],\r\n                    iconNode: this.iconNode,\r\n                    menuItem: item\r\n                });\r\n            }));\r\n            menu.addChild(item);\r\n        },\r\n        // toggle all sublayers on/off\r\n        _toggleAllSublayers: function (state) {\r\n            array.forEach(this._sublayerControls, function (control) {\r\n                control._setSublayerCheckbox(state);\r\n            });\r\n            this._setVisibleLayers();\r\n        },\r\n        // add folder/sublayer controls per layer.layerInfos\r\n        _createSublayers: function (layer) {\r\n            // check for single sublayer - if so no sublayer/folder controls\r\n            if (layer.layerInfos.length > 1) {\r\n                var allLayers = array.map(layer.layerInfos, function (l) {\r\n                    return l.id;\r\n                });\r\n                array.forEach(layer.layerInfos, lang.hitch(this, function (info) {\r\n                    // see if there was any override needed from the subLayerInfos array in the controlOptions\r\n                    var sublayerInfo = array.filter(this.controlOptions.subLayerInfos, function (sli) {\r\n                        return sli.id === info.id;\r\n                    }).shift();\r\n                    lang.mixin(info, sublayerInfo);\r\n                    var pid = info.parentLayerId,\r\n                        slids = info.subLayerIds,\r\n                        controlId = layer.id + '-' + info.id + '-sublayer-control',\r\n                        control;\r\n                    // it's a top level\r\n                    if (pid === -1 || allLayers.indexOf(pid) === -1) {\r\n                        if (slids === null) {\r\n                            // it's a top level sublayer\r\n                            control = new DynamicSublayer({\r\n                                id: controlId,\r\n                                control: this,\r\n                                sublayerInfo: info,\r\n                                icons: this.icons\r\n                            });\r\n                            domConst.place(control.domNode, this.expandNode, 'last');\r\n                        } else if (slids !== null) {\r\n                            // it's a top level folder\r\n                            control = new DynamicFolder({\r\n                                id: controlId,\r\n                                control: this,\r\n                                sublayerInfo: info,\r\n                                icons: this.icons\r\n                            });\r\n                            domConst.place(control.domNode, this.expandNode, 'last');\r\n                        }\r\n                    } else if (pid !== -1 && slids !== null) {\r\n                        // it's a nested folder\r\n                        control = new DynamicFolder({\r\n                            id: controlId,\r\n                            control: this,\r\n                            sublayerInfo: info,\r\n                            icons: this.icons\r\n                        });\r\n                        domConst.place(control.domNode, registry.byId(layer.id + '-' + info.parentLayerId + '-sublayer-control').expandNode, 'last');\r\n                    } else if (pid !== -1 && slids === null) {\r\n                        // it's a nested sublayer\r\n                        control = new DynamicSublayer({\r\n                            id: controlId,\r\n                            control: this,\r\n                            sublayerInfo: info,\r\n                            icons: this.icons\r\n                        });\r\n                        domConst.place(control.domNode, registry.byId(layer.id + '-' + info.parentLayerId + '-sublayer-control').expandNode, 'last');\r\n                    }\r\n                    control.startup();\r\n                    this._sublayerControls.push(control);\r\n                }));\r\n            }\r\n        },\r\n        // simply remove expandClickNode\r\n        _removeSublayerLegends: function () {\r\n            array.forEach(this._sublayerControls, function (control) {\r\n                if (!control.sublayerInfo.subLayerIds) {\r\n                    domConst.destroy(control.expandClickNode);\r\n                }\r\n            });\r\n        },\r\n        // set dynamic layer visible layers\r\n        _setVisibleLayers: function () {\r\n            // remove aspect handler\r\n            this._visLayersHandler.remove();\r\n            // because ags doesn't respect a layer group's visibility\r\n            //   i.e. layer 3 (the group) is not in array but it's sublayers are; sublayers will show\r\n            //   so check and if group is off also remove the sublayers\r\n            var layer = this.layer,\r\n                setLayers = [];\r\n            array.forEach(query('.' + layer.id + '-layerControlSublayerCheck'), function (i) {\r\n                if (domAttr.get(i, 'data-checked') === 'checked') {\r\n                    setLayers.push(parseInt(domAttr.get(i, 'data-sublayer-id'), 10));\r\n                }\r\n            });\r\n            array.forEach(layer.layerInfos, function (info) {\r\n                if (info.subLayerIds !== null && array.indexOf(setLayers, info.id) === -1) {\r\n                    array.forEach(info.subLayerIds, function (sub) {\r\n                        if (array.indexOf(setLayers, sub) !== -1) {\r\n                            setLayers.splice(array.indexOf(setLayers, sub), 1);\r\n                        }\r\n                    });\r\n                } else if (info.subLayerIds !== null && array.indexOf(setLayers, info.id) !== -1) {\r\n                    setLayers.splice(array.indexOf(setLayers, info.id), 1);\r\n                }\r\n            });\r\n            if (!setLayers.length) {\r\n                setLayers.push(-1);\r\n            }\r\n            layer.setVisibleLayers(setLayers);\r\n            layer.refresh();\r\n            topic.publish('layerControl/setVisibleLayers', {\r\n                id: layer.id,\r\n                visibleLayers: setLayers\r\n            });\r\n            // set aspect handler\r\n            this._visLayersHandler = aspect.after(this.layer, 'setVisibleLayers', lang.hitch(this, '_onSetVisibleLayers'), true);\r\n        },\r\n        _onSetVisibleLayers: function (visLayers) {\r\n            var visibleIds = [];\r\n            array.forEach(this.layer.layerInfos, function (info) {\r\n                if (array.indexOf(visLayers, info.id) !== -1) {\r\n                    visibleIds.push(info.id);\r\n                }\r\n                if (info.parentLayerId !== -1 && array.indexOf(visibleIds, info.parentLayerId) === -1) {\r\n                    visibleIds.push(info.parentLayerId);\r\n                }\r\n            });\r\n            array.forEach(this._sublayerControls, function (control) {\r\n                if (array.indexOf(visibleIds, control.sublayerInfo.id) !== -1) {\r\n                    control._setSublayerCheckbox(true);\r\n                } else {\r\n                    control._setSublayerCheckbox(false);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return DynamicControl;\r\n});\r\n"]}