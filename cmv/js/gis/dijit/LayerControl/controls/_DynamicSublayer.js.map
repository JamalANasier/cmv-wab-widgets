{"version":3,"sources":["_DynamicSublayer.js"],"names":["define","declare","lang","array","on","domClass","domStyle","domAttr","fx","html","Menu","MenuItem","topic","WidgetBase","TemplatedMixin","sublayerTemplate","i18n","_DynamicSublayer","control","sublayerInfo","menu","icons","templateString","_expandClickHandler","_handlers","postCreate","this","inherited","arguments","controlOptions","subLayerInfos","includeUnspecifiedLayers","map","sli","id","indexOf","add","domNode","layerIds","checkNode","set","layer","visibleLayers","_setSublayerCheckbox","push","hitch","get","_setVisibleLayers","_checkboxScaleRange","labelNode","name","_expandClick","minScale","maxScale","getMap","length","iconNode","contextMenuForWindow","targetNodeIds","leftClickToOpen","forEach","startup","_addMenuItem","menuItem","item","publish","subLayer","addChild","i","expandClickNode","expandNode","expandIconNode","wipeIn","node","duration","play","replace","collapse","expand","wipeOut","checked","unchecked","scale","getScale","min","max","remove","destroy","h"],"mappings":"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","file":"_DynamicSublayer.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/on',\r\n    'dojo/dom-class',\r\n    'dojo/dom-style',\r\n    'dojo/dom-attr',\r\n    'dojo/fx',\r\n    'dojo/html',\r\n    'dijit/Menu',\r\n    'dijit/MenuItem',\r\n    'dojo/topic',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dojo/text!./templates/Sublayer.html',\r\n    'dojo/i18n!./../nls/resource'\r\n], function (\r\n        declare,\r\n        lang,\r\n        array,\r\n        on,\r\n        domClass,\r\n        domStyle,\r\n        domAttr,\r\n        fx,\r\n        html,\r\n        Menu,\r\n        MenuItem,\r\n        topic,\r\n        WidgetBase,\r\n        TemplatedMixin,\r\n        sublayerTemplate,\r\n        i18n\r\n        ) {\r\n    var _DynamicSublayer = declare([WidgetBase, TemplatedMixin], {\r\n        control: null,\r\n        sublayerInfo: null,\r\n        menu: null,\r\n        icons: null,\r\n        // ^args\r\n        templateString: sublayerTemplate,\r\n        i18n: i18n,\r\n        _expandClickHandler: null,\r\n        _handlers: [],\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            // Should the control be visible or hidden (depends on subLayerInfos)?\r\n            if (this.control.controlOptions.subLayerInfos && !this.control.controlOptions.includeUnspecifiedLayers) {\r\n                var subLayerInfos = array.map(this.control.controlOptions.subLayerInfos, function (sli) {\r\n                    return sli.id;\r\n                });\r\n                if (array.indexOf(subLayerInfos, this.sublayerInfo.id) < 0) {\r\n                    domClass.add(this.domNode, 'layerControlHidden');\r\n                }\r\n            }\r\n            // Should the control be visible or hidden?\r\n            if (this.control.controlOptions.layerIds && array.indexOf(this.control.controlOptions.layerIds, this.sublayerInfo.id) < 0) {\r\n                domClass.add(this.domNode, 'layerControlHidden');\r\n            }\r\n            var checkNode = this.checkNode;\r\n            domAttr.set(checkNode, 'data-sublayer-id', this.sublayerInfo.id);\r\n            domClass.add(checkNode, this.control.layer.id + '-layerControlSublayerCheck');\r\n            if (array.indexOf(this.control.layer.visibleLayers, this.sublayerInfo.id) !== -1) {\r\n                this._setSublayerCheckbox(true, checkNode);\r\n            } else {\r\n                this._setSublayerCheckbox(false, checkNode);\r\n            }\r\n            this._handlers.push(on(checkNode, 'click', lang.hitch(this, function () {\r\n                if (domAttr.get(checkNode, 'data-checked') === 'checked') {\r\n                    this._setSublayerCheckbox(false, checkNode);\r\n                } else {\r\n                    this._setSublayerCheckbox(true, checkNode);\r\n                }\r\n                this.control._setVisibleLayers();\r\n                this._checkboxScaleRange();\r\n            })));\r\n            html.set(this.labelNode, this.sublayerInfo.name);\r\n            this._expandClick();\r\n            if (this.sublayerInfo.minScale !== 0 || this.sublayerInfo.maxScale !== 0) {\r\n                this._checkboxScaleRange();\r\n                this._handlers.push(this.control.layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange')));\r\n            }\r\n            //set up menu\r\n            if (this.control.controlOptions.menu &&\r\n                    this.control.controlOptions.menu.length) {\r\n                domClass.add(this.labelNode, 'menuLink');\r\n                domClass.add(this.iconNode, 'menuLink');\r\n                this.menu = new Menu({\r\n                    contextMenuForWindow: false,\r\n                    targetNodeIds: [this.labelNode],\r\n                    leftClickToOpen: true\r\n                });\r\n                array.forEach(this.control.controlOptions.menu, lang.hitch(this, '_addMenuItem'));\r\n                this.menu.startup();\r\n            }\r\n        },\r\n        _addMenuItem: function (menuItem) {\r\n            //create the menu item\r\n            var item = new MenuItem(menuItem);\r\n            item.set('onClick', lang.hitch(this, function () {\r\n                topic.publish('layerControl/' + menuItem.topic, {\r\n                    layer: this.control.layer,\r\n                    subLayer: this.sublayerInfo,\r\n                    iconNode: this.iconNode,\r\n                    menuItem: item\r\n                });\r\n            }));\r\n            this.menu.addChild(item);\r\n        },\r\n        // add on event to expandClickNode\r\n        _expandClick: function () {\r\n            var i = this.icons;\r\n            this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, function () {\r\n                var expandNode = this.expandNode,\r\n                    iconNode = this.expandIconNode;\r\n                if (domStyle.get(expandNode, 'display') === 'none') {\r\n                    fx.wipeIn({\r\n                        node: expandNode,\r\n                        duration: 300\r\n                    }).play();\r\n                    domClass.replace(iconNode, i.collapse, i.expand);\r\n                } else {\r\n                    fx.wipeOut({\r\n                        node: expandNode,\r\n                        duration: 300\r\n                    }).play();\r\n                    domClass.replace(iconNode, i.expand, i.collapse);\r\n                }\r\n            }));\r\n            this._handlers.push(this._expandClickHandler);\r\n        },\r\n        // set checkbox based on layer so it's always in sync\r\n        _setSublayerCheckbox: function (checked, checkNode) {\r\n            checkNode = checkNode || this.checkNode;\r\n            var i = this.icons;\r\n            if (checked) {\r\n                domAttr.set(checkNode, 'data-checked', 'checked');\r\n                domClass.replace(checkNode, i.checked, i.unchecked);\r\n            } else {\r\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\r\n                domClass.replace(checkNode, i.unchecked, i.checked);\r\n            }\r\n        },\r\n        // check scales and add/remove disabled classes from checkbox\r\n        _checkboxScaleRange: function () {\r\n            var node = this.checkNode,\r\n                scale = this.control.layer.getMap().getScale(),\r\n                min = this.sublayerInfo.minScale,\r\n                max = this.sublayerInfo.maxScale;\r\n            domClass.remove(node, 'layerControlCheckIconOutScale');\r\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\r\n                domClass.add(node, 'layerControlCheckIconOutScale');\r\n            }\r\n        },\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n            this._handlers.forEach(function (h) {\r\n                h.remove();\r\n            });\r\n        }\r\n    });\r\n    return _DynamicSublayer;\r\n});\r\n"]}