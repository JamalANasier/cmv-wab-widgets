{"version":3,"sources":["_LayoutMixin.js"],"names":["define","declare","lang","topic","array","on","aspect","dom","domQuery","domStyle","domClass","domGeom","has","put","BorderContainer","ContentPane","PopupMobile","mapOverlay","panes","left","id","placeAt","collapsible","region","center","content","collapseButtons","initLayout","this","config","layout","addTopics","addTitles","detectTouchDevices","initPanes","subscribe","hitch","args","togglePane","pane","show","suppressEvent","widgetLoader","options","position","isDebug","mode","mapClickMode","current","publish","defaultMode","titles","header","headerTitleNode","byId","innerHTML","subHeader","subHeaderTitle","pageTitle","document","title","key","defaultPanes","clone","hasOwnProperty","mixin","container","body","outer","design","gutters","type","startup","createPanes","collapseButtonsPane","domNode","parentNode","positionSideBarToggle","splitter","_splitterWidget","after","undefined","open","add","map","root","top","bottom","resizeLayout","newDisp","oldDisp","get","handleError","source","error","set","resize","btn","disp","rCls","aCls","remove","children","pos","orie","getMarginBox","toString","repositionSideBarButtons","btns","forEach","_splitterStartDrag","_splitterStopDrag","screen","availWidth","availHeight","mapOptions","infoWindow"],"mappings":"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","file":"_LayoutMixin.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang',\r\n    'dojo/topic',\r\n    'dojo/_base/array',\r\n    'dojo/on',\r\n    'dojo/aspect',\r\n    'dojo/dom',\r\n    'dojo/query',\r\n    'dojo/dom-style',\r\n    'dojo/dom-class',\r\n    'dojo/dom-geometry',\r\n    'dojo/sniff',\r\n\r\n    'put-selector',\r\n\r\n    'dijit/layout/BorderContainer',\r\n    'dijit/layout/ContentPane',\r\n\r\n    'esri/dijit/PopupMobile',\r\n\r\n    'dojo/text!./templates/mapOverlay.html'\r\n], function (\r\n    declare,\r\n    lang,\r\n    topic,\r\n    array,\r\n    on,\r\n    aspect,\r\n    dom,\r\n    domQuery,\r\n    domStyle,\r\n    domClass,\r\n    domGeom,\r\n    has,\r\n\r\n    put,\r\n\r\n    BorderContainer,\r\n    ContentPane,\r\n\r\n    PopupMobile,\r\n\r\n    mapOverlay\r\n) {\r\n\r\n    return declare(null, {\r\n\r\n        panes: {\r\n            left: {\r\n                id: 'sidebarLeft',\r\n                placeAt: 'outer',\r\n                collapsible: true,\r\n                region: 'left'\r\n            },\r\n            center: {\r\n                id: 'mapCenter',\r\n                placeAt: 'outer',\r\n                region: 'center',\r\n                content: mapOverlay\r\n            }\r\n        },\r\n        collapseButtons: {},\r\n\r\n        initLayout: function () {\r\n            this.config.layout = this.config.layout || {};\r\n\r\n            this.addTopics();\r\n            this.addTitles();\r\n            this.detectTouchDevices();\r\n            this.initPanes();\r\n        },\r\n\r\n        // add topics for subscribing and publishing\r\n        addTopics: function () {\r\n            // toggle a sidebar pane\r\n            topic.subscribe('viewer/togglePane', lang.hitch(this, function (args) {\r\n                this.togglePane(args.pane, args.show, args.suppressEvent);\r\n            }));\r\n\r\n            // load a widget\r\n            topic.subscribe('viewer/loadWidget', lang.hitch(this, function (args) {\r\n                this.widgetLoader(args.options, args.position);\r\n            }));\r\n\r\n            // setup error handler. centralize the debugging\r\n            if (this.config.isDebug) {\r\n                topic.subscribe('viewer/handleError', lang.hitch(this, 'handleError'));\r\n            }\r\n\r\n            // set the current mapClickMode\r\n            topic.subscribe('mapClickMode/setCurrent', lang.hitch(this, function (mode) {\r\n                this.mapClickMode.current = mode;\r\n                topic.publish('mapClickMode/currentSet', mode);\r\n            }));\r\n\r\n            // set the current mapClickMode to the default mode\r\n            topic.subscribe('mapClickMode/setDefault', lang.hitch(this, function () {\r\n                topic.publish('mapClickMode/setCurrent', this.mapClickMode.defaultMode);\r\n            }));\r\n\r\n        },\r\n\r\n        // set titles (if any)\r\n        addTitles: function () {\r\n            if (!this.config.titles) {\r\n                return;\r\n            }\r\n            var titles = this.config.titles;\r\n            if (titles.header) {\r\n                var headerTitleNode = dom.byId('headerTitleSpan');\r\n                if (headerTitleNode) {\r\n                    headerTitleNode.innerHTML = titles.header;\r\n                }\r\n            }\r\n            if (titles.subHeader) {\r\n                var subHeaderTitle = dom.byId('subHeaderTitleSpan');\r\n                if (subHeaderTitle) {\r\n                    subHeaderTitle.innerHTML = titles.subHeader;\r\n                }\r\n            }\r\n            if (titles.pageTitle) {\r\n                document.title = titles.pageTitle;\r\n            }\r\n        },\r\n        // setup all the sidebar panes\r\n        initPanes: function () {\r\n            var key,\r\n                panes = this.config.panes || {};\r\n            this.defaultPanes = lang.clone(this.panes);\r\n            for (key in this.panes) {\r\n                if (this.defaultPanes.hasOwnProperty(key)) {\r\n                    panes[key] = lang.mixin(this.defaultPanes[key], panes[key]);\r\n                }\r\n            }\r\n\r\n            var container = dom.byId(this.config.layout.container) || document.body;\r\n            this.panes.outer = new BorderContainer({\r\n                id: 'borderContainerOuter',\r\n                design: 'sidebar',\r\n                gutters: false\r\n            }).placeAt(container);\r\n\r\n            var options, placeAt, type;\r\n            for (key in panes) {\r\n                if (panes.hasOwnProperty(key)) {\r\n                    options = lang.clone(panes[key]);\r\n                    placeAt = this.panes[options.placeAt] || this.panes.outer;\r\n                    options.id = options.id || key;\r\n                    type = options.type;\r\n                    delete options.placeAt;\r\n                    delete options.type;\r\n                    delete options.collapsible;\r\n                    if (placeAt) {\r\n                        if (type === 'border') {\r\n                            this.panes[key] = new BorderContainer(options).placeAt(placeAt);\r\n                        } else if (options.region) {\r\n                            this.panes[key] = new ContentPane(options).placeAt(placeAt);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.panes.outer.startup();\r\n        },\r\n\r\n        createPanes: function () {\r\n            var key,\r\n                panes = this.config.panes || {};\r\n            for (key in this.panes) {\r\n                if (this.defaultPanes.hasOwnProperty(key)) {\r\n                    panes[key] = lang.mixin(this.defaultPanes[key], panes[key]);\r\n                }\r\n            }\r\n                        // where to place the buttons\r\n            // either the center map pane or the outer pane?\r\n            this.collapseButtonsPane = this.config.collapseButtonsPane || 'outer';\r\n\r\n            for (key in panes) {\r\n                if (panes.hasOwnProperty(key)) {\r\n                    if (panes[key].collapsible) {\r\n                        this.collapseButtons[key] = put(this.panes[this.collapseButtonsPane].domNode, 'div.sidebarCollapseButton.sidebar' + key + 'CollapseButton.sidebarCollapseButton' + ((key === 'bottom' || key === 'top') ? 'Vert' : 'Horz') + ' div.dijitIcon.button.close').parentNode;\r\n                        on(this.collapseButtons[key], 'click', lang.hitch(this, 'togglePane', key, null, false));\r\n                        this.positionSideBarToggle(key);\r\n                        if (this.collapseButtonsPane === 'outer') {\r\n                            var splitter = this.panes[key]._splitterWidget;\r\n                            if (splitter) {\r\n                                aspect.after(splitter, '_startDrag', lang.hitch(this, '_splitterStartDrag', key));\r\n                                aspect.after(splitter, '_stopDrag', lang.hitch(this, '_splitterStopDrag', key));\r\n                            }\r\n                        }\r\n                    }\r\n                    if (panes[key].open !== undefined) {\r\n                        this.togglePane(key, panes[key].open, true);\r\n                    }\r\n                    if (key !== 'center' && this.panes[key]._splitterWidget) {\r\n                        domClass.add(this.map.root.parentNode, 'pane' + key);\r\n                        if (key === 'right' && this.panes.top) {\r\n                            domClass.add(this.panes.top.domNode, 'pane' + key);\r\n                        }\r\n                        if (key === 'right' && this.panes.bottom) {\r\n                            domClass.add(this.panes.bottom.domNode, 'pane' + key);\r\n                        }\r\n                        if (key === 'left' && this.panes.top) {\r\n                            domClass.add(this.panes.top.domNode, 'pane' + key);\r\n                        }\r\n                        if (key === 'left' && this.panes.bottom) {\r\n                            domClass.add(this.panes.bottom.domNode, 'pane' + key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.resizeLayout();\r\n        },\r\n\r\n        togglePane: function (id, show, suppressEvent) {\r\n            if (!this.panes[id]) {\r\n                return;\r\n            }\r\n            var domNode = this.panes[id].domNode;\r\n            if (domNode) {\r\n                var oldDisp = domStyle.get(domNode, 'display');\r\n                var newDisp;\r\n\r\n                if (typeof(show) === 'string' && (show === 'none' || show === 'block')) {\r\n                    // Set (CSS Display Property)\r\n                    newDisp = show;\r\n                } else if (typeof(show) === 'boolean') {\r\n                    // Set (boolean)\r\n                    newDisp = (show) ? 'block' : 'none';\r\n                } else if (show === undefined || show === null) {\r\n                    // Toggle\r\n                    newDisp = (oldDisp === 'none') ? 'block' : 'none';\r\n                } else {\r\n                    this.handleError({\r\n                        source: '_LayoutMixin',\r\n                        error: 'Invalid type passed as \"show\" property of \"togglePane\" function : ' + typeof(show)\r\n                    });\r\n                    return;\r\n                }\r\n                show = (newDisp === 'block');\r\n\r\n                if (newDisp !== oldDisp) {\r\n                    domStyle.set(domNode, 'display', newDisp);\r\n                    if (this.panes[id]._splitterWidget) { // show/hide the splitter, if found\r\n                        domStyle.set(this.panes[id]._splitterWidget.domNode, 'display', newDisp);\r\n                    }\r\n                    this.positionSideBarToggle(id);\r\n                    if (this.panes.outer) {\r\n                        this.panes.outer.resize();\r\n                    }\r\n\r\n                    if (!suppressEvent) {\r\n                        topic.publish('viewer/onTogglePane', {pane: id, show: show});\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        positionSideBarToggle: function (id) {\r\n            var pane = this.panes[id];\r\n            var btn = this.collapseButtons[id];\r\n            if (!pane || !btn) {\r\n                return;\r\n            }\r\n            var disp = domStyle.get(pane.domNode, 'display');\r\n            var rCls = (disp === 'none') ? 'close' : 'open';\r\n            var aCls = (disp === 'none') ? 'open' : 'close';\r\n            domClass.remove(btn.children[0], rCls);\r\n            domClass.add(btn.children[0], aCls);\r\n\r\n            // extra management required when the buttons\r\n            // are not in the center map pane\r\n            if (this.collapseButtonsPane === 'outer') {\r\n                var pos = (pane._splitterWidget) ? 0 : -1;\r\n                var orie = (id === 'bottom' || id === 'top') ? 'h' : 'w';\r\n                if (disp === 'block') { // pane is open\r\n                    pos += domGeom.getMarginBox(pane.domNode)[orie];\r\n                }\r\n                if (pane._splitterWidget) { // account for a splitter\r\n                    pos += domGeom.getMarginBox(pane._splitterWidget.domNode)[orie];\r\n                }\r\n                domStyle.set(btn, id, pos.toString() + 'px');\r\n                domStyle.set(btn, 'display', 'block');\r\n            }\r\n        },\r\n\r\n        repositionSideBarButtons: function () {\r\n            var btns = ['left', 'right', 'top', 'bottom'];\r\n            array.forEach(btns, lang.hitch(this, function (id) {\r\n                this.positionSideBarToggle(id);\r\n            }));\r\n        },\r\n\r\n        resizeLayout: function () {\r\n            this.panes.outer.resize();\r\n        },\r\n\r\n        // extra management of splitters required when the buttons\r\n        // are not in the center map pane\r\n        _splitterStartDrag: function (id) {\r\n            var btn = this.collapseButtons[id];\r\n            domStyle.set(btn, 'display', 'none');\r\n        },\r\n        _splitterStopDrag: function (id) {\r\n            this.positionSideBarToggle(id);\r\n        },\r\n\r\n        // simple feature detection. kinda like dojox/mobile without the overhead\r\n        detectTouchDevices: function () {\r\n            if (has('touch') && (has('ios') || has('android') || has('bb'))) {\r\n                has.add('mobile', true);\r\n                if (screen.availWidth < 500 || screen.availHeight < 500) {\r\n                    has.add('phone', true);\r\n                } else {\r\n                    has.add('tablet', true);\r\n                }\r\n\r\n                // use the mobile popup for phones\r\n                if (has('phone') && !this.config.mapOptions.infoWindow) {\r\n                    this.config.mapOptions.infoWindow = new PopupMobile(null, put('div'));\r\n                }\r\n            }\r\n\r\n        }\r\n    });\r\n});\r\n"]}