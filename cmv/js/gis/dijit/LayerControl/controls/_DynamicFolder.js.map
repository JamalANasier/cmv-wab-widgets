{"version":3,"sources":["_DynamicFolder.js"],"names":["define","declare","lang","array","on","domClass","domStyle","domAttr","fx","html","WidgetBase","TemplatedMixin","folderTemplate","_DynamicFolder","control","sublayerInfo","icons","templateString","_expandClickHandler","_handlers","postCreate","this","inherited","arguments","controlOptions","subLayerInfos","includeUnspecifiedLayers","map","sli","id","indexOf","add","domNode","layerIds","checkNode","set","layer","visibleLayers","_setSublayerCheckbox","push","hitch","get","_setVisibleLayers","_checkboxScaleRange","labelNode","name","_expandClick","minScale","maxScale","getMap","i","expandClickNode","expandNode","iconNode","expandIconNode","wipeIn","node","duration","play","replace","folderOpen","folder","wipeOut","checked","unchecked","scale","getScale","min","max","remove","destroy","forEach","h"],"mappings":"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","file":"_DynamicFolder.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/on',\r\n    'dojo/dom-class',\r\n    'dojo/dom-style',\r\n    'dojo/dom-attr',\r\n    'dojo/fx',\r\n    'dojo/html',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dojo/text!./templates/Folder.html'\r\n], function (\r\n    declare,\r\n    lang,\r\n    array,\r\n    on,\r\n    domClass,\r\n    domStyle,\r\n    domAttr,\r\n    fx,\r\n    html,\r\n    WidgetBase,\r\n    TemplatedMixin,\r\n    folderTemplate\r\n) {\r\n    var _DynamicFolder = declare([WidgetBase, TemplatedMixin], {\r\n        control: null,\r\n        sublayerInfo: null,\r\n        icons: null,\r\n        // ^args\r\n        templateString: folderTemplate,\r\n        _expandClickHandler: null,\r\n        _handlers: [],\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            // Should the control be visible or hidden (depends on subLayerInfos)?\r\n            if (this.control.controlOptions.subLayerInfos && !this.control.controlOptions.includeUnspecifiedLayers) {\r\n                var subLayerInfos = array.map(this.control.controlOptions.subLayerInfos, function (sli) {\r\n                    return sli.id;\r\n                });\r\n                if (array.indexOf(subLayerInfos, this.sublayerInfo.id) < 0) {\r\n                    domClass.add(this.domNode, 'layerControlHidden');\r\n                }\r\n            }\r\n            // Should the control be visible or hidden?\r\n            if (this.control.controlOptions.layerIds && array.indexOf(this.control.controlOptions.layerIds, this.sublayerInfo.id) < 0) {\r\n                domClass.add(this.domNode, 'layerControlHidden');\r\n            }\r\n            var checkNode = this.checkNode;\r\n            domAttr.set(checkNode, 'data-sublayer-id', this.sublayerInfo.id);\r\n            domClass.add(checkNode, this.control.layer.id + '-layerControlSublayerCheck');\r\n            if (array.indexOf(this.control.layer.visibleLayers, this.sublayerInfo.id) !== -1) {\r\n                this._setSublayerCheckbox(true, checkNode);\r\n            } else {\r\n                this._setSublayerCheckbox(false, checkNode);\r\n            }\r\n            this._handlers.push(on(checkNode, 'click', lang.hitch(this, function () {\r\n                if (domAttr.get(checkNode, 'data-checked') === 'checked') {\r\n                    this._setSublayerCheckbox(false, checkNode);\r\n                } else {\r\n                    this._setSublayerCheckbox(true, checkNode);\r\n                }\r\n                this.control._setVisibleLayers();\r\n                this._checkboxScaleRange();\r\n            })));\r\n            html.set(this.labelNode, this.sublayerInfo.name);\r\n            this._expandClick();\r\n            if (this.sublayerInfo.minScale !== 0 || this.sublayerInfo.maxScale !== 0) {\r\n                this._checkboxScaleRange();\r\n                this._handlers.push(this.control.layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange')));\r\n            }\r\n        },\r\n        // add on event to expandClickNode\r\n        _expandClick: function () {\r\n            var i = this.icons;\r\n            this._handlers.push(this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, function () {\r\n                var expandNode = this.expandNode,\r\n                    iconNode = this.expandIconNode;\r\n                if (domStyle.get(expandNode, 'display') === 'none') {\r\n                    fx.wipeIn({\r\n                        node: expandNode,\r\n                        duration: 300\r\n                    }).play();\r\n                    domClass.replace(iconNode, i.folderOpen, i.folder);\r\n                } else {\r\n                    fx.wipeOut({\r\n                        node: expandNode,\r\n                        duration: 300\r\n                    }).play();\r\n                    domClass.replace(iconNode, i.folder, i.folderOpen);\r\n                }\r\n            })));\r\n        },\r\n        // set checkbox based on layer so it's always in sync\r\n        _setSublayerCheckbox: function (checked, checkNode) {\r\n            checkNode = checkNode || this.checkNode;\r\n            var i = this.icons;\r\n            if (checked) {\r\n                domAttr.set(checkNode, 'data-checked', 'checked');\r\n                domClass.replace(checkNode, i.checked, i.unchecked);\r\n            } else {\r\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\r\n                domClass.replace(checkNode, i.unchecked, i.checked);\r\n            }\r\n        },\r\n        // check scales and add/remove disabled classes from checkbox\r\n        _checkboxScaleRange: function () {\r\n            var node = this.checkNode,\r\n                scale = this.control.layer.getMap().getScale(),\r\n                min = this.sublayerInfo.minScale,\r\n                max = this.sublayerInfo.maxScale;\r\n            domClass.remove(node, 'layerControlCheckIconOutScale');\r\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\r\n                domClass.add(node, 'layerControlCheckIconOutScale');\r\n            }\r\n        },\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n            this._handlers.forEach(function (h) {\r\n                h.remove();\r\n            });\r\n        }\r\n    });\r\n    return _DynamicFolder;\r\n});"]}