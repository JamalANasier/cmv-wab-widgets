{"version":3,"sources":["_ControllerBase.js"],"names":["define","declare","lang","startup","this","inherited","arguments","initConfigAsync","then","hitch","handleError","options","config","isDebug","option","hasOwnProperty","mixinDeep","dest","source","empty","name","constructor","Object","e"],"mappings":";;;;;AACAA,QACI,qBACA,mBACD,SACCC,EACAC,GAEA,MAAOD,GAAQ,MAEXE,QAAS,WACLC,KAAKC,UAAUC,WAGfF,KAAKG,kBAAkBC,KACnBN,EAAKO,MAAML,KAAM,qBACjBF,EAAKO,MAAML,KAAM,qBAKzBM,YAAa,SAAUC,GACnB,GAAIP,KAAKQ,OAAOC,SACa,gBAAd,SACP,IAAK,GAAIC,KAAUH,GACXA,EAAQI,eAAeD,IAW3CE,UAAW,SAAUC,EAAMC,GAEvB,GAAIC,KACJ,KAAK,GAAIC,KAAQF,GACb,KAAME,IAAQH,KAAUA,EAAKG,KAAUF,EAAOE,IAAYA,IAAQD,IAAUA,EAAMC,KAAUF,EAAOE,KAC/F,IACQF,EAAOE,GAAMC,cAAgBC,OAC7BL,EAAKG,GAAQhB,KAAKY,UAAUC,EAAKG,GAAOF,EAAOE,IAE/CH,EAAKG,GAAQF,EAAOE,GAE1B,MAAOG,GAELN,EAAKG,GAAQF,EAAOE,GAIhC,MAAOH","file":"_ControllerBase.js","sourcesContent":["/*eslint no-console: 0*/\r\ndefine([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang'\r\n], function (\r\n    declare,\r\n    lang\r\n) {\r\n    return declare(null, {\r\n\r\n        startup: function () {\r\n            this.inherited(arguments);\r\n\r\n            // in _ConfigMixin\r\n            this.initConfigAsync().then(\r\n                lang.hitch(this, 'initConfigSuccess'),\r\n                lang.hitch(this, 'initConfigError')\r\n            );\r\n        },\r\n\r\n        //centralized error handler\r\n        handleError: function (options) {\r\n            if (this.config.isDebug) {\r\n                if (typeof (console) === 'object') {\r\n                    for (var option in options) {\r\n                        if (options.hasOwnProperty(option)) {\r\n                            console.log(option, options[option]);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // add growler here?\r\n                return;\r\n            }\r\n        },\r\n\r\n        mixinDeep: function (dest, source) {\r\n            //Recursively mix the properties of two objects\r\n            var empty = {};\r\n            for (var name in source) {\r\n                if (!(name in dest) || (dest[name] !== source[name] && (!(name in empty) || empty[name] !== source[name]))) {\r\n                    try {\r\n                        if (source[name].constructor === Object) {\r\n                            dest[name] = this.mixinDeep(dest[name], source[name]);\r\n                        } else {\r\n                            dest[name] = source[name];\r\n                        }\r\n                    } catch (e) {\r\n                        // Property in destination object not set. Create it and set its value.\r\n                        dest[name] = source[name];\r\n                    }\r\n                }\r\n            }\r\n            return dest;\r\n        }\r\n    });\r\n});"]}