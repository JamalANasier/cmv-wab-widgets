{"version":3,"sources":["legendUtil.js"],"names":["define","array","lang","has","topic","domConst","domClass","domStyle","html","registry","gfx","esriRequest","Legend","esriBundle","i18n","widgets","legend","NLS_noLegend","noLegend","isLegend","controlOptions","controller","_legendRequest","layer","expandNode","callback","errback","content","f","token","_getToken","options","disableIdentityLookup","usePost","useProxy","layerDrawingOptions","length","dynamicLayers","this","_createDynamicLayerParameter","url","callbackParamName","then","hitch","_arcgisLegendRequest","index","toLowerCase","indexOf","soap","substring","window","escape","_image","layerId","src","imageData","img","create","class","id","set","width","height","opacity","layerLegend","map","getMap","layerInfos","setTimeout","startup","dynamicSublayerLegend","version","_createDynamicSublayerLegend","r","forEach","layers","_layer","table","add","row","symbol","innerHTML","label","place","reduce","prior","curr","sublayerExpandNode","byId","_dynamicSublayerLegendError","e","publish","source","error","_surfaceDims","vectorLegend","renderer","infos","_createVectorLegend","description","value","info","sym","descriptor","getShapeDescriptors","ds","defaultShape","fill","stroke","w","h","surfaceNode","display","surface","createSurface","shape","createShape","setFill","setStroke","applyTransform","dx","dy","dynamicLayerInfos","createDynamicLayerInfosFromLayerInfos","dlis","param","dli","subLayerIds","i","name","toJson","drawingInfo","push","JSON","stringify"],"mappings":"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","file":"legendUtil.js","sourcesContent":["/*eslint camelcase: 0*/\r\ndefine([\r\n    'dojo/_base/array',\r\n    'dojo/_base/lang',\r\n    'dojo/has',\r\n    'dojo/topic',\r\n    'dojo/dom-construct',\r\n    'dojo/dom-class',\r\n    'dojo/dom-style',\r\n    'dojo/html',\r\n    'dijit/registry',\r\n    'dojox/gfx',\r\n    'esri/request',\r\n    // temp\r\n    'esri/dijit/Legend',\r\n    'dojo/i18n!esri/nls/jsapi',\r\n    'dojo/i18n!./../nls/resource'\r\n], function (\r\n    array,\r\n    lang,\r\n    has,\r\n    topic,\r\n    domConst,\r\n    domClass,\r\n    domStyle,\r\n    html,\r\n    registry,\r\n    gfx,\r\n    esriRequest,\r\n    Legend,\r\n    esriBundle,\r\n    i18n\r\n) {\r\n\r\n    esriBundle.widgets.legend.NLS_noLegend = i18n.noLegend;\r\n\r\n    return {\r\n        /////////////////////\r\n        // utility methods //\r\n        /////////////////////\r\n        // check controlOptions and controller to determine legend/no legend\r\n        // aliases e.g. controlOptions.noLegend\r\n        isLegend: function (controlOptions, controller) {\r\n            if (controller === null || controller === false) {\r\n                if (controlOptions === true) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            } else if (controller === true) {\r\n                if (controlOptions === false) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        // request legend json\r\n        _legendRequest: function (layer, expandNode, callback, errback) {\r\n            var content = {\r\n                    f: 'json',\r\n                    token: (typeof layer._getToken === 'function') ? layer._getToken() : null\r\n                },\r\n                options = {disableIdentityLookup: false,\r\n                    usePost: false,\r\n                    useProxy: false};\r\n            if (layer.layerDrawingOptions && layer.layerDrawingOptions.length > 0) {\r\n                content.dynamicLayers = this._createDynamicLayerParameter(layer);\r\n                options.usePost = true;\r\n            }\r\n            esriRequest({\r\n                url: layer.url + '/legend',\r\n                callbackParamName: 'callback',\r\n                content: content\r\n            }, options).then(\r\n                lang.hitch(this, callback, layer, expandNode),\r\n                lang.hitch(this, errback, layer, expandNode)\r\n            );\r\n        },\r\n        // request arcgis.com legend json\r\n        _arcgisLegendRequest: function (layer, expandNode, callback, errback) {\r\n            var index = layer.url.toLowerCase().indexOf('/rest/');\r\n            var soap = layer.url.substring(0, index) + layer.url.substring(index + 5, layer.url.length);\r\n            var url = 'https://utility.arcgis.com/sharing/tools/legend?soapUrl=' + window.escape(soap);\r\n            if (!has('ie') || has('ie') > 8) {\r\n                url += '&returnbytes=true';\r\n            }\r\n            esriRequest({\r\n                url: url,\r\n                callbackParamName: 'callback',\r\n                content: {\r\n                    f: 'json'\r\n                }\r\n            }).then(\r\n                lang.hitch(this, callback, layer, expandNode),\r\n                lang.hitch(this, errback, layer, expandNode)\r\n            );\r\n        },\r\n        // create a legend image from json\r\n        _image: function (legend, layerId, layer) {\r\n            var src = legend.url;\r\n            if ((!has('ie') || has('ie') >= 9) && legend.imageData && legend.imageData.length > 0) {\r\n                src = 'data:image/png;base64,' + legend.imageData;\r\n            } else if (legend.url.indexOf('http') !== 0) {\r\n                src = layer.url + '/' + layerId + '/images/' + legend.url;\r\n                var token = layer._getToken();\r\n                if (token) {\r\n                    src += '?token=' + token;\r\n                }\r\n            }\r\n            // create image\r\n            var img = domConst.create('img', {\r\n                src: src,\r\n                'class': layer.id + '-layerLegendImage'\r\n            });\r\n            domStyle.set(img, {\r\n                'width': legend.width + 'px',\r\n                'height': legend.height + 'px',\r\n                'opacity': layer.opacity\r\n            });\r\n            return img;\r\n        },\r\n        ////////////////////////////////////////\r\n        // layer legend for dynamic and tiled //\r\n        ////////////////////////////////////////\r\n        // image layers will most likely have own legend methods...but use this for now\r\n        layerLegend: function (layer, expandNode) {\r\n            // a stop gap\r\n            var legend = new Legend({\r\n                map: layer.getMap(),\r\n                layerInfos: [{\r\n                    layer: layer\r\n                }]\r\n            }, domConst.create('div', {}, expandNode));\r\n            // strange dijit/Popup error if startup() immediately...weird\r\n            setTimeout(function () {\r\n                legend.startup();\r\n            }, 1);\r\n            // check version and handle accordingly\r\n            //if (layer.version >= 10.01) {\r\n            //    this._legendRequest(layer, expandNode, '_createLayerLegend', '_layerLegendError');\r\n            //} else {\r\n            //    this._arcgisLegendRequest(layer, expandNode, '_createLayerLegend', '_layerLegendError');\r\n            //}\r\n        },\r\n        /////////////////////////////\r\n        // dynamic sublayer legend //\r\n        /////////////////////////////\r\n        // create legends for dynamic control w/ sublayers\r\n        dynamicSublayerLegend: function (layer, expandNode) {\r\n            // check version and handle accordingly\r\n            if (layer.version >= 10.01) {\r\n                this._legendRequest(layer, expandNode, '_createDynamicSublayerLegend', '_dynamicSublayerLegendError');\r\n            } else {\r\n                this._arcgisLegendRequest(layer, expandNode, '_createDynamicSublayerLegend', '_dynamicSublayerLegendError');\r\n            }\r\n        },\r\n        // handle the response, build legends and place\r\n        // TODO: is there a better way than using registry to place sublayer legends?\r\n        //       could remove id's from sublayer controls and simplify some\r\n        //       is query a better option or not?\r\n        _createDynamicSublayerLegend: function (layer, expandNode, r) {\r\n            array.forEach(r.layers, function (_layer) {\r\n                var layerId = _layer.layerId;\r\n                // create legend table\r\n                var table = domConst.create('table');\r\n                domClass.add(table, 'layerControlLegendTable');\r\n                // iterate through legends\r\n                array.forEach(_layer.legend, function (legend) {\r\n                    // create a table row and symbol td\r\n                    var row = domConst.create('tr', {}, table, 'last'),\r\n                        symbol = domConst.create('td', {\r\n                            'class': 'layerControlLegendImage'\r\n                        }, row, 'first');\r\n                    // create label td\r\n                    domConst.create('td', {\r\n                        innerHTML: legend.label || '&nbsp;',\r\n                        'class': 'layerControlLegendLabel'\r\n                    }, row, 'last');\r\n\r\n                    domConst.place(this._image(legend, layerId, layer), symbol);\r\n                }, this);\r\n                if (layer.layerInfos.reduce(function (prior, curr) {\r\n                    return (curr.id === _layer.layerId) || prior;\r\n                }, false)) {\r\n                    // place legend in the appropriate sublayer expandNode\r\n                    // or if a single layer use control expandNode\r\n                    if (layer.layerInfos.length > 1) {\r\n                        var sublayerExpandNode = registry.byId(layer.id + '-' + _layer.layerId + '-sublayer-control').expandNode;\r\n                        html.set(sublayerExpandNode, ''); //clear \"No Legend\" placeholder\r\n                        domConst.place(table, sublayerExpandNode);\r\n                    } else {\r\n                        domConst.place(table, expandNode);\r\n                    }\r\n                }\r\n            }, this);\r\n        },\r\n        // handle error\r\n        _dynamicSublayerLegendError: function (layer, expandNode, e) {\r\n            if (layer.layerInfos.length === 1) {\r\n                html.set(expandNode, 'No Legend');\r\n            }\r\n            topic.publish('viewer/handleError', {\r\n                source: 'LayerControl/legendUtil/_createDynamicSublayerLegend',\r\n                error: e\r\n            });\r\n        },\r\n        /////////////////////////\r\n        // vector layer legend //\r\n        /////////////////////////\r\n        // width and height of surface\r\n        _surfaceDims: [20, 20],\r\n        // determine what the renderer is and handle appropriately\r\n        vectorLegend: function (layer, expandNode) {\r\n            //  layer.renderer.symbol = single symbol (esri.renderer.SimpleRenderer, etc)\r\n            //  layer.renderer.infos = multiple symbols (esri.renderer.UniqueValueRenderer, etc)\r\n            //  TODO: read up on every single renderer! (just to be a better person)\r\n            var symbol = layer.renderer.symbol,\r\n                infos = layer.renderer.infos;\r\n            // are we dealing w/ a single symbol, multiple symbols or nothing\r\n            if (symbol) {\r\n                // pass array with single object equivalent to an `infos` object\r\n                this._createVectorLegend([{\r\n                    symbol: symbol,\r\n                    description: '',\r\n                    label: '',\r\n                    value: ''\r\n                }], layer, expandNode);\r\n            } else if (infos) {\r\n                this._createVectorLegend(infos, layer, expandNode);\r\n            } else {\r\n                html.set(expandNode, 'No Legend');\r\n            }\r\n        },\r\n        // create legends for vector layers (feature, etc)\r\n        _createVectorLegend: function (infos, layer, expandNode) {\r\n            //create legend table\r\n            var table = domConst.create('table');\r\n            domClass.add(table, 'layerControlLegendTable');\r\n            //iterate over infos\r\n            array.forEach(infos, function (info) {\r\n                //create a table row and symbol\r\n                var row = domConst.create('tr', {}, table, 'last'),\r\n                    symbol = domConst.create('td', {\r\n                        'class': 'layerControlLegendImage'\r\n                    }, row, 'first');\r\n                domConst.create('td', {\r\n                    innerHTML: info.label || '&nbsp;',\r\n                    'class': 'layerControlLegendLabel'\r\n                }, row, 'last');\r\n                // the symbol and descriptors\r\n                var sym = info.symbol,\r\n                    descriptor = sym.getShapeDescriptors(),\r\n                    ds = descriptor.defaultShape,\r\n                    fill = descriptor.fill,\r\n                    stroke = descriptor.stroke;\r\n                // it's either an image or we're creating a gfx shape representation of the symbol\r\n                if (!ds.src) {\r\n                    if (sym) {\r\n                        // width and height\r\n                        var w = this._surfaceDims[0],\r\n                            h = this._surfaceDims[1];\r\n                        if (sym.width && sym.height) {\r\n                            w = sym.width;\r\n                            h = sym.height;\r\n                        }\r\n                        // create node for surface\r\n                        var surfaceNode = domConst.create('span', {}, symbol);\r\n                        domStyle.set(surfaceNode, {\r\n                            'width': w + 'px',\r\n                            'height': h + 'px',\r\n                            'display': 'inline-block'\r\n                        });\r\n                        // create surface and add shape\r\n                        var surface = gfx.createSurface(surfaceNode, w, h);\r\n                        var shape = surface.createShape(ds);\r\n                        if (fill) {\r\n                            shape.setFill(fill);\r\n                        }\r\n                        if (stroke) {\r\n                            shape.setStroke(stroke);\r\n                        }\r\n                        shape.applyTransform({\r\n                            dx: w / 2,\r\n                            dy: h / 2\r\n                        });\r\n                        // set opacity of td\r\n                        //  it works but is there a better way?\r\n                        domStyle.set(symbol, {\r\n                            'opacity': layer.opacity\r\n                        });\r\n                        domClass.add(symbol, layer.id + '-layerLegendImage');\r\n                    } else {\r\n                        html.set(expandNode, 'No Legend');\r\n                        topic.publish('viewer/handleError', {\r\n                            source: 'LayerControl/legendUtil/_createVectorLegend',\r\n                            error: 'renderer does not contain symbol(s)'\r\n                        });\r\n                    }\r\n                } else {\r\n                    // create image\r\n                    var img = domConst.create('img', {\r\n                        src: ds.src\r\n                    }, symbol);\r\n                    domStyle.set(img, {\r\n                        'width': sym.width + 'px',\r\n                        'height': sym.height + 'px',\r\n                        'opacity': layer.opacity\r\n                    });\r\n                    domClass.add(img, layer.id + '-layerLegendImage');\r\n                }\r\n                // place legend in expandNode\r\n                domConst.place(table, expandNode);\r\n            }, this);\r\n        },\r\n        _createDynamicLayerParameter: function (layer) {\r\n            if (layer.dynamicLayerInfos && layer.dynamicLayerInfos.length > 0 || layer.layerDrawingOptions && layer.layerDrawingOptions.length > 0) {\r\n                layer.dynamicLayerInfos = layer.createDynamicLayerInfosFromLayerInfos();\r\n                var dlis = layer.dynamicLayerInfos,\r\n                    param = [];\r\n                dlis.forEach(function (dli) {\r\n                    if (!dli.subLayerIds) {\r\n                        var e, i = dli.id;\r\n                        e = {\r\n                            id: i,\r\n                            name: dli.name\r\n                        };\r\n                        if (dli.source) {\r\n                            e.source = dli.source.toJson();\r\n                        }\r\n                        if (layer.layerDrawingOptions && layer.layerDrawingOptions[i]) {\r\n                            e.drawingInfo = layer.layerDrawingOptions[i].toJson();\r\n                        }\r\n                        param.push(e);\r\n                    }\r\n                }, this);\r\n                return JSON.stringify(param);\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n});"]}