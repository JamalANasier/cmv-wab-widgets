{"version":3,"sources":["Find.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","domConstruct","lang","array","on","keys","domStyle","Memory","OnDemandGrid","Selection","Keyboard","ColumnResizer","GraphicsLayer","symbolUtils","graphicsUtils","FindTask","FindParameters","Extent","FindTemplate","i18n","widgetsInTemplate","templateString","baseClass","spatialReference","showOptionsButton","zoomOptions","select","deselect","defaultResultsSymbols","point","type","style","size","color","angle","xoffset","yoffset","outline","width","polyline","polygon","defaultSelectionSymbols","postCreate","this","inherited","arguments","set","optionsDropDownDijit","domNode","initializeGlobalVariables","addKeyUpHandlerToSearchInput","initializeQueries","updateSearchPrompt","queryIdx","currentQueryEventHandlers","gridColumns","selectionMode","zoomExtentFactor","map","wkid","pointExtentSize","own","searchTextDijit","hitch","evt","keyCode","ENTER","search","k","queryLen","queries","length","id","querySelectDom","display","queryStore","data","querySelectDijit","userInputIsInvalid","displayInvalidUserInputMessage","queryConfigurationIsInvalid","displayInvalidQueryConfigurationMessage","createOrResetResultsGrid","displayFindMessage","searching","executeFindTask","url","getQueryInput","query","findParams","getFindParams","findTask","execute","showResults","searchText","get","searchFields","layerIds","userInput","userInputLessThanMinLength","queryInput","minChars","message","empty","findResultsNode","innerHTML","returnGeometry","layerDefinitions","layerDefs","contains","containsSearchText","checked","outSpatialReference","resultsGrid","createResultsStore","createResultsGrid","attachStandardEventHandlersToResultsGrid","clearResultsGrid","clearFeatures","resetResultsGridColumns","resetResultsGridSort","resetGridSelectionMode","attachCustomEventHandlersToResultsGrid","resultsStore","idProperty","Grid","cellNavigation","showHeader","store","findResultsGrid","startup","columns","layerName","foundFieldName","value","Array","filter","column","visible","setColumns","sort","attribute","descending","forEach","handler","handle","remove","queryEventHandlers","customGridEventHandlers","event","results","resultText","noResultsLabel","s","resultsLabel","multipleResultsSuffix","labelPrefix","labelSuffix","createGraphicsLayerAndSymbols","parseGridColumnProperties","addResultsToGraphicsLayer","zoomToGraphics","graphicsLayer","graphics","showResultsGrid","createGraphicsLayer","graphicsSymbols","createGraphicsSymbols","title","addLayer","onGraphicsLayerClick","zoomOnSelect","row","graphic","storeid","focus","element","resultSymbolDefinitions","selectionSymbolDefinitions","graphicSymbols","mixin","resultsSymbols","fromJson","selectionSymbols","result","shouldGetValueFromAttributes","col","res","field","hasOwnProperty","feature","attributes","shouldGetValueFromGetFunction","unique","setGraphicSymbol","add","setData","refresh","lyrDisplay","styleColumn","hideGrid","onResultsGridSelect","rows","getDojoShape","moveToFront","redraw","zoomToSelectedGraphics","onResultsGridDeselect","onResultsGridRowClick","setTimeout","selection","isSelected","symbol","geometry","setSymbol","selectedGraphics","push","zoomExtent","graphicsExtent","getExtentFromGraphic","setMapExtent","extent","getExtentFromPoint","sz","pointGeometry","xmin","x","ymin","y","xmax","ymax","setExtent","expand","clearResults","searchFormDijit","reset","setValue","resultStore","clear","_onQueryChange","prompt","placeholder","onZoomOptionsSelectChange","onZoomOptionsDeselectChange"],"mappings":"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","file":"Find.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dijit/_WidgetsInTemplateMixin',\r\n    'dojo/dom-construct',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/on',\r\n    'dojo/keys',\r\n    'dojo/dom-style',\r\n    'dojo/store/Memory',\r\n    'dgrid/OnDemandGrid',\r\n    'dgrid/Selection',\r\n    'dgrid/Keyboard',\r\n    'dgrid/extensions/ColumnResizer',\r\n    'esri/layers/GraphicsLayer',\r\n    'esri/symbols/jsonUtils',\r\n    'esri/graphicsUtils',\r\n    'esri/tasks/FindTask',\r\n    'esri/tasks/FindParameters',\r\n    'esri/geometry/Extent',\r\n    'dojo/text!./Find/templates/Find.html',\r\n    'dojo/i18n!./Find/nls/resource',\r\n\r\n    'dijit/form/Form',\r\n    'dijit/form/DropDownButton',\r\n    'dijit/TooltipDialog',\r\n    'dijit/form/FilteringSelect',\r\n    'dijit/form/ValidationTextBox',\r\n    'dijit/form/CheckBox',\r\n    'dijit/form/Button',\r\n    'xstyle/css!./Find/css/Find.css'\r\n], function (\r\n    declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, domConstruct, lang, array, on, keys, domStyle, Memory,\r\n    OnDemandGrid, Selection, Keyboard, ColumnResizer, GraphicsLayer, symbolUtils, graphicsUtils, FindTask, FindParameters, Extent,\r\n    FindTemplate, i18n\r\n) {\r\n\r\n    return declare(\r\n        [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n            widgetsInTemplate: true,\r\n            templateString: FindTemplate,\r\n            baseClass: 'gis_AdvancedFindDijit',\r\n            i18n: i18n,\r\n            spatialReference: null,\r\n            showOptionsButton: false,\r\n            zoomOptions: {\r\n                select: true,\r\n                deselect: false\r\n            },\r\n            defaultResultsSymbols: {\r\n                point: {\r\n                    type: 'esriSMS',\r\n                    style: 'esriSMSCircle',\r\n                    size: 25,\r\n                    color: [0, 255, 255, 32],\r\n                    angle: 0,\r\n                    xoffset: 0,\r\n                    yoffset: 0,\r\n                    outline: {\r\n                        type: 'esriSLS',\r\n                        style: 'esriSLSSolid',\r\n                        color: [0, 255, 255, 255],\r\n                        width: 2\r\n                    }\r\n                },\r\n                polyline: {\r\n                    type: 'esriSLS',\r\n                    style: 'esriSLSSolid',\r\n                    color: [0, 255, 255, 255],\r\n                    width: 3\r\n                },\r\n                polygon: {\r\n                    type: 'esriSFS',\r\n                    style: 'esriSFSSolid',\r\n                    color: [0, 255, 255, 32],\r\n                    outline: {\r\n                        type: 'esriSLS',\r\n                        style: 'esriSLSSolid',\r\n                        color: [0, 255, 255, 255],\r\n                        width: 3\r\n                    }\r\n                }\r\n            },\r\n            defaultSelectionSymbols: {\r\n                point: {\r\n                    type: 'esriSMS',\r\n                    style: 'esriSMSCircle',\r\n                    size: 25,\r\n                    color: [4, 156, 219, 32],\r\n                    angle: 0,\r\n                    xoffset: 0,\r\n                    yoffset: 0,\r\n                    outline: {\r\n                        type: 'esriSLS',\r\n                        style: 'esriSLSSolid',\r\n                        color: [4, 156, 219, 255],\r\n                        width: 2\r\n                    }\r\n                },\r\n                polyline: {\r\n                    type: 'esriSLS',\r\n                    style: 'esriSLSSolid',\r\n                    color: [4, 156, 219, 255],\r\n                    width: 3\r\n                },\r\n                polygon: {\r\n                    type: 'esriSFS',\r\n                    style: 'esriSFSSolid',\r\n                    color: [4, 156, 219, 32],\r\n                    outline: {\r\n                        type: 'esriSLS',\r\n                        style: 'esriSLSSolid',\r\n                        color: [4, 156, 219, 255],\r\n                        width: 3\r\n                    }\r\n                }\r\n            },\r\n            postCreate: function () {\r\n                this.inherited(arguments);\r\n                if (this.showOptionsButton) {\r\n                    domStyle.set(this.optionsDropDownDijit.domNode, 'display', 'inline-block');\r\n                }\r\n                this.initializeGlobalVariables();\r\n                this.addKeyUpHandlerToSearchInput();\r\n                this.initializeQueries();\r\n                this.updateSearchPrompt();\r\n            },\r\n            initializeGlobalVariables: function () {\r\n                this.queryIdx = 0;\r\n                this.currentQueryEventHandlers = [];\r\n                this.gridColumns = null;\r\n                if (!this.selectionMode) {\r\n                    this.selectionMode = 'single';\r\n                }\r\n                if (!this.zoomExtentFactor) {\r\n                    this.zoomExtentFactor = 1.5;\r\n                }\r\n                if (!this.spatialReference) {\r\n                    this.spatialReference = this.map.spatialReference.wkid;\r\n                }\r\n                if (!this.pointExtentSize) {\r\n                    this.pointExtentSize = this.spatialReference === 4326 ? 0.0001 : 25;\r\n                }\r\n            },\r\n            addKeyUpHandlerToSearchInput: function () {\r\n                this.own(\r\n                    on(\r\n                        this.searchTextDijit, 'keyup', lang.hitch(\r\n                            this, function (evt) {\r\n                                if (evt.keyCode === keys.ENTER) {\r\n                                    this.search();\r\n                                }\r\n                            }\r\n                        )\r\n                    )\r\n                );\r\n            },\r\n            initializeQueries: function () {\r\n                var k = 0,\r\n                    queryLen = this.queries.length;\r\n                for (k = 0; k < queryLen; k++) {\r\n                    this.queries[k].id = k;\r\n                }\r\n                this.querySelectDom.style.display = 'none';\r\n                if (queryLen > 1) {\r\n                    var queryStore = new Memory({\r\n                        data: this.queries\r\n                    });\r\n                    this.querySelectDijit.set('store', queryStore);\r\n                    this.querySelectDijit.set('value', this.queryIdx);\r\n                    this.querySelectDom.style.display = 'block';\r\n                }\r\n            },\r\n            search: function () {\r\n                if (this.userInputIsInvalid()) {\r\n                    this.displayInvalidUserInputMessage();\r\n                    return;\r\n                }\r\n                if (this.queryConfigurationIsInvalid()) {\r\n                    this.displayInvalidQueryConfigurationMessage();\r\n                    return;\r\n                }\r\n                this.createOrResetResultsGrid();\r\n                this.displayFindMessage(this.i18n.searching);\r\n                this.executeFindTask();\r\n            },\r\n            executeFindTask: function () {\r\n                var url = this.getQueryInput().query.url;\r\n                var findParams = this.getFindParams();\r\n                var findTask = new FindTask(url);\r\n                findTask.execute(findParams, lang.hitch(this, this.showResults));\r\n            },\r\n            getQueryInput: function () {\r\n                return {\r\n                    query: this.queries[this.queryIdx] || {},\r\n                    searchText: this.searchTextDijit.get('value')\r\n                };\r\n            },\r\n            queryConfigurationIsInvalid: function () {\r\n                var query = this.getQueryInput().query;\r\n                if (!query.url || !query.searchFields || !query.layerIds) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            userInputIsInvalid: function () {\r\n                var userInput = this.getQueryInput().searchText;\r\n                if (userInput.length === 0 || this.userInputLessThanMinLength()) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            userInputLessThanMinLength: function () {\r\n                var queryInput = this.getQueryInput();\r\n                if (queryInput.query.minChars && (queryInput.searchText.length < queryInput.query.minChars)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            displayInvalidQueryConfigurationMessage: function () {\r\n                this.displayFindMessage('There is a problem with the query configuration.');\r\n                return;\r\n            },\r\n            displayInvalidUserInputMessage: function () {\r\n                var minChars = this.getQueryInput().query.minChars;\r\n                this.displayFindMessage('You must enter at least ' + minChars + ' characters.');\r\n                return;\r\n            },\r\n            displayFindMessage: function (message) {\r\n                domConstruct.empty(this.findResultsNode);\r\n                this.findResultsNode.innerHTML = message;\r\n                this.findResultsNode.style.display = 'block';\r\n            },\r\n            getFindParams: function () {\r\n                var queryInput = this.getQueryInput();\r\n                var findParams = new FindParameters();\r\n                findParams.returnGeometry = true;\r\n                findParams.layerIds = queryInput.query.layerIds;\r\n                findParams.searchFields = queryInput.query.searchFields;\r\n                findParams.layerDefinitions = queryInput.query.layerDefs;\r\n                findParams.searchText = queryInput.searchText;\r\n                findParams.contains = !this.containsSearchText.checked;\r\n                findParams.outSpatialReference = {\r\n                    wkid: this.spatialReference\r\n                };\r\n                return findParams;\r\n            },\r\n            createOrResetResultsGrid: function () {\r\n                if (!this.resultsGrid) {\r\n                    this.createResultsStore();\r\n                    this.createResultsGrid();\r\n                    this.attachStandardEventHandlersToResultsGrid();\r\n                }\r\n                this.clearResultsGrid();\r\n                this.clearFeatures();\r\n                this.resetResultsGridColumns();\r\n                this.resetResultsGridSort();\r\n                this.resetGridSelectionMode();\r\n                this.attachCustomEventHandlersToResultsGrid();\r\n            },\r\n            createResultsStore: function () {\r\n                if (!this.resultsStore) {\r\n                    this.resultsStore = new Memory({\r\n                        idProperty: 'id',\r\n                        data: []\r\n                    });\r\n                }\r\n            },\r\n            createResultsGrid: function () {\r\n                var Grid = declare([OnDemandGrid, Keyboard, Selection, ColumnResizer]);\r\n                this.resultsGrid = new Grid({\r\n                    selectionMode: this.selectionMode,\r\n                    cellNavigation: false,\r\n                    showHeader: true,\r\n                    store: this.resultsStore\r\n                }, this.findResultsGrid);\r\n                this.resultsGrid.startup();\r\n            },\r\n            resetResultsGridColumns: function () {\r\n                if (!this.resultsGrid) {\r\n                    return;\r\n                }\r\n                var columns = this.queries[this.queryIdx].gridColumns || {\r\n                    layerName: 'Layer',\r\n                    foundFieldName: 'Field',\r\n                    value: 'Result'\r\n                };\r\n                if (columns instanceof Array) {\r\n                    columns = array.filter(\r\n                        columns, function (column) {\r\n                            if (typeof column.visible === 'undefined') {\r\n                                column.visible = true;\r\n                            }\r\n                            return column.visible;\r\n                        }\r\n                    );\r\n                }\r\n                this.resultsGrid.setColumns(columns);\r\n            },\r\n            resetResultsGridSort: function () {\r\n                if (!this.resultsGrid) {\r\n                    return;\r\n                }\r\n                var sort = this.queries[this.queryIdx].sort || [\r\n                    {\r\n                        attribute: 'value',\r\n                        descending: false\r\n                    }\r\n                ];\r\n                this.resultsGrid.set('sort', sort);\r\n            },\r\n            resetGridSelectionMode: function () {\r\n                if (!this.resultsGrid) {\r\n                    return;\r\n                }\r\n                var selectionMode = this.queries[this.queryIdx].selectionMode || this.selectionMode;\r\n                this.resultsGrid.set('selectionMode', selectionMode);\r\n            },\r\n            attachStandardEventHandlersToResultsGrid: function () {\r\n                if (!this.resultsGrid) {\r\n                    return;\r\n                }\r\n                this.own(\r\n                    this.resultsGrid.on('dgrid-select', lang.hitch(this, 'onResultsGridSelect'))\r\n                );\r\n                this.own(\r\n                    this.resultsGrid.on('dgrid-deselect', lang.hitch(this, 'onResultsGridDeselect'))\r\n                );\r\n                this.own(\r\n                    this.resultsGrid.on('.dgrid-row:dblclick', lang.hitch(this, 'onResultsGridRowClick'))\r\n                );\r\n            },\r\n            attachCustomEventHandlersToResultsGrid: function () {\r\n                if (!this.resultsGrid) {\r\n                    return;\r\n                }\r\n                array.forEach(this.currentQueryEventHandlers, function (handler) {\r\n                    handler.handle.remove();\r\n                });\r\n                var queryEventHandlers = this.queries[this.queryIdx].customGridEventHandlers || [];\r\n                array.forEach(queryEventHandlers, lang.hitch(this, function (handler) {\r\n                    handler.handle = this.resultsGrid.on(handler.event, lang.hitch(this, handler.handler));\r\n                }));\r\n                this.currentQueryEventHandlers = queryEventHandlers;\r\n            },\r\n            showResults: function (results) {\r\n                var resultText = this.i18n.noResultsLabel;\r\n                this.results = results;\r\n                if (this.results.length > 0) {\r\n                    var s = (this.results.length === 1) ? '' : this.i18n.resultsLabel.multipleResultsSuffix;\r\n                    resultText = this.results.length + ' ' + this.i18n.resultsLabel.labelPrefix + s + ' ' + this.i18n.resultsLabel.labelSuffix;\r\n                    this.createGraphicsLayerAndSymbols();\r\n                    this.parseGridColumnProperties();\r\n                    this.addResultsToGraphicsLayer();\r\n                    this.zoomToGraphics(this.graphicsLayer.graphics);\r\n                    this.showResultsGrid();\r\n                }\r\n                this.displayFindMessage(resultText);\r\n            },\r\n            createGraphicsLayerAndSymbols: function () {\r\n                if (!this.graphicsLayer) {\r\n                    this.graphicsLayer = this.createGraphicsLayer();\r\n                }\r\n                if (!this.graphicsSymbols) {\r\n                    this.graphicsSymbols = this.createGraphicsSymbols();\r\n                }\r\n            },\r\n            createGraphicsLayer: function () {\r\n                var graphicsLayer = new GraphicsLayer({\r\n                    id: this.id + '_findGraphics',\r\n                    title: 'Find'\r\n                });\r\n                graphicsLayer.on('click', lang.hitch(this, 'onGraphicsLayerClick'));\r\n                this.map.addLayer(graphicsLayer);\r\n                return graphicsLayer;\r\n            },\r\n            onGraphicsLayerClick: function (event) {\r\n                var zoomOnSelect = this.zoomOptions.select;\r\n                this.zoomOptions.select = false;\r\n                var row = this.resultsGrid.row(event.graphic.storeid);\r\n                this.resultsGrid.select(row);\r\n                this.resultsGrid.focus(row.element);\r\n                row.element.focus();\r\n                this.zoomOptions.select = zoomOnSelect;\r\n            },\r\n            createGraphicsSymbols: function () {\r\n                var graphicSymbols = {}, resultSymbolDefinitions, selectionSymbolDefinitions;\r\n                resultSymbolDefinitions = lang.mixin(this.defaultResultsSymbols, this.resultsSymbols || {});\r\n                graphicSymbols.resultsSymbols = {};\r\n                graphicSymbols.resultsSymbols.point = symbolUtils.fromJson(resultSymbolDefinitions.point);\r\n                graphicSymbols.resultsSymbols.polyline = symbolUtils.fromJson(resultSymbolDefinitions.polyline);\r\n                graphicSymbols.resultsSymbols.polygon = symbolUtils.fromJson(resultSymbolDefinitions.polygon);\r\n                selectionSymbolDefinitions = lang.mixin(\r\n                    this.defaultSelectionSymbols, this.selectionSymbols || {}\r\n                );\r\n                graphicSymbols.selectionSymbols = {};\r\n                graphicSymbols.selectionSymbols.point = symbolUtils.fromJson(selectionSymbolDefinitions.point);\r\n                graphicSymbols.selectionSymbols.polyline = symbolUtils.fromJson(selectionSymbolDefinitions.polyline);\r\n                graphicSymbols.selectionSymbols.polygon = symbolUtils.fromJson(selectionSymbolDefinitions.polygon);\r\n                return graphicSymbols;\r\n            },\r\n            parseGridColumnProperties: function () {\r\n                if (this.queries[this.queryIdx].gridColumns) {\r\n                    array.forEach(\r\n                        this.results, function (result) {\r\n                            array.forEach(\r\n                                this.queries[this.queryIdx].gridColumns, function (column) {\r\n                                    function shouldGetValueFromAttributes (col, res) {\r\n                                        if (col.field && !result.hasOwnProperty(col.field) && res.feature.attributes.hasOwnProperty(col.field)) {\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    }\r\n\r\n                                    function shouldGetValueFromGetFunction (col, res) {\r\n                                        if (col.field && !res.hasOwnProperty(col.field) && col.get) {\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    }\r\n\r\n                                    if (shouldGetValueFromAttributes(column, this)) {\r\n                                        this[column.field] = this.feature.attributes[column.field];\r\n                                    } else if (shouldGetValueFromGetFunction (column, this)) {\r\n                                        this[column.field] = column.get(this);\r\n                                    }\r\n                                }, result\r\n                            );\r\n                        }, this\r\n                    );\r\n                }\r\n            },\r\n            addResultsToGraphicsLayer: function () {\r\n                var unique = 0;\r\n                array.forEach(\r\n                    this.results, function (result) {\r\n                        result.id = unique;\r\n                        result.feature.storeid = result.id;\r\n                        unique++;\r\n                        this.setGraphicSymbol(result.feature, false);\r\n                        this.graphicsLayer.add(result.feature);\r\n                    }, this\r\n                );\r\n            },\r\n            showResultsGrid: function () {\r\n                var queryInput = this.getQueryInput();\r\n                this.resultsGrid.store.setData(this.results);\r\n                this.resultsGrid.refresh();\r\n                var lyrDisplay = 'block';\r\n                if (queryInput.query.layerIds.length === 1) {\r\n                    lyrDisplay = 'none';\r\n                }\r\n                this.resultsGrid.styleColumn('layerName', 'display:' + lyrDisplay);\r\n                if (queryInput.query && queryInput.query.hideGrid !== true) {\r\n                    this.findResultsGrid.style.display = 'block';\r\n                }\r\n            },\r\n            onResultsGridSelect: function (event) {\r\n                array.forEach(\r\n                    event.rows, lang.hitch(\r\n                        this, function (row) {\r\n                            var feature = row.data.feature;\r\n                            this.setGraphicSymbol(feature, true);\r\n                            if (feature && feature.getDojoShape()) {\r\n                                feature.getDojoShape().moveToFront();\r\n                            }\r\n                        }\r\n                    )\r\n                );\r\n                this.graphicsLayer.redraw();\r\n                if (this.zoomOptions.select) {\r\n                    this.zoomToSelectedGraphics();\r\n                }\r\n            },\r\n            onResultsGridDeselect: function (event) {\r\n                array.forEach(\r\n                    event.rows, lang.hitch(\r\n                        this, function (row) {\r\n                            var feature = row.data.feature;\r\n                            this.setGraphicSymbol(feature, false);\r\n                        }\r\n                    )\r\n                );\r\n                this.graphicsLayer.redraw();\r\n                if (this.zoomOptions.deselect) {\r\n                    this.zoomToSelectedGraphics();\r\n                }\r\n            },\r\n            onResultsGridRowClick: function (event) {\r\n                var row = this.resultsGrid.row(event);\r\n                var feature = row.data.feature;\r\n                setTimeout(lang.hitch(this, function () {\r\n                    if (this.resultsGrid.selection.hasOwnProperty(row.id)) {\r\n                        this.zoomToGraphics([feature]);\r\n                    }\r\n                }), 100);\r\n            },\r\n            setGraphicSymbol: function (graphic, isSelected) {\r\n                var symbol = isSelected ? this.graphicsSymbols.selectionSymbols[graphic.geometry.type] : this.graphicsSymbols.resultsSymbols[graphic.geometry.type];\r\n                graphic.setSymbol(symbol);\r\n            },\r\n            zoomToSelectedGraphics: function () {\r\n                var selectedGraphics = [];\r\n                var selection = this.resultsGrid.selection;\r\n                for (var id in selection) {\r\n                    if (selection.hasOwnProperty(id)) {\r\n                        selectedGraphics.push(this.resultsGrid.row(id).data.feature);\r\n                    }\r\n                }\r\n                if (selectedGraphics.length === 0) {\r\n                    return;\r\n                }\r\n                this.zoomToGraphics(selectedGraphics);\r\n            },\r\n            zoomToGraphics: function (graphics) {\r\n                var zoomExtent = null;\r\n                if (graphics.length > 1) {\r\n                    zoomExtent = graphicsUtils.graphicsExtent(graphics);\r\n                } else if (graphics.length === 1) {\r\n                    zoomExtent = this.getExtentFromGraphic(graphics[0]);\r\n                }\r\n                if (zoomExtent) {\r\n                    this.setMapExtent(zoomExtent);\r\n                }\r\n            },\r\n            getExtentFromGraphic: function (graphic) {\r\n                var extent = null;\r\n                switch (graphic.geometry.type) {\r\n                case 'point':\r\n                    extent = this.getExtentFromPoint(graphic);\r\n                    break;\r\n                default:\r\n                    extent = graphicsUtils.graphicsExtent([graphic]);\r\n                    break;\r\n                }\r\n                return extent;\r\n            },\r\n            getExtentFromPoint: function (point) {\r\n                var sz = this.pointExtentSize; // hack\r\n                var pointGeometry = point.geometry;\r\n                return new Extent({\r\n                    'xmin': pointGeometry.x - sz,\r\n                    'ymin': pointGeometry.y - sz,\r\n                    'xmax': pointGeometry.x + sz,\r\n                    'ymax': pointGeometry.y + sz,\r\n                    'spatialReference': {\r\n                        wkid: this.spatialReference\r\n                    }\r\n                });\r\n            },\r\n            setMapExtent: function (extent) {\r\n                this.map.setExtent(extent.expand(this.zoomExtentFactor));\r\n            },\r\n            clearResults: function () {\r\n                this.results = null;\r\n                this.clearResultsGrid();\r\n                this.clearFeatures();\r\n                this.searchFormDijit.reset();\r\n                this.querySelectDijit.setValue(this.queryIdx);\r\n                domConstruct.empty(this.findResultsNode);\r\n            },\r\n            clearResultsGrid: function () {\r\n                if (this.resultStore) {\r\n                    this.resultsStore.setData([]);\r\n                }\r\n                if (this.resultsGrid) {\r\n                    this.resultsGrid.refresh();\r\n                }\r\n                this.findResultsNode.style.display = 'none';\r\n                this.findResultsGrid.style.display = 'none';\r\n            },\r\n            clearFeatures: function () {\r\n                if (this.graphicsLayer) {\r\n                    this.graphicsLayer.clear();\r\n                }\r\n            },\r\n            _onQueryChange: function (queryIdx) {\r\n                if (queryIdx >= 0 && queryIdx < this.queries.length) {\r\n                    this.queryIdx = queryIdx;\r\n                    this.updateSearchPrompt();\r\n                }\r\n            },\r\n            updateSearchPrompt: function () {\r\n                var prompt = this.queries[this.queryIdx].prompt || i18n.searchText.placeholder;\r\n                this.searchTextDijit.set('placeholder', prompt);\r\n                this.searchTextDijit.set('value', null);\r\n            },\r\n            onZoomOptionsSelectChange: function (value) {\r\n                this.zoomOptions.select = value;\r\n            },\r\n            onZoomOptionsDeselectChange: function (value) {\r\n                this.zoomOptions.deselect = value;\r\n            }\r\n        }\r\n    );\r\n});\r\n"]}