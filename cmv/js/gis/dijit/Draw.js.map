{"version":3,"sources":["Draw.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","lang","Color","Draw","GraphicsLayer","Graphic","SimpleRenderer","drawTemplate","UniqueValueRenderer","SimpleMarkerSymbol","SimpleLineSymbol","SimpleFillSymbol","FeatureLayer","topic","aspect","i18n","widgetsInTemplate","templateString","drawToolbar","mapClickMode","postCreate","this","inherited","arguments","map","on","hitch","createGraphicLayers","own","subscribe","parentWidget","toggleable","after","onLayoutChange","open","pointSymbol","STYLE_CIRCLE","STYLE_SOLID","polylineSymbol","STYLE_DASH","polygonSymbol","STYLE_DASHDOT","pointGraphics","id","title","pointRenderer","label","description","setRenderer","addLayer","polylineGraphics","polylineRenderer","polygonGraphics","layerDefinition","geometryType","fields","name","type","alias","domain","editable","nullable","featureSet","mode","MODE_SNAPSHOT","polygonRenderer","addValue","value","symbol","color","outline","width","style","drawPoint","disconnectMapClick","activate","POINT","drawModeTextNode","innerText","labels","point","drawCircle","CIRCLE","circle","drawLine","POLYLINE","polyline","drawFreehandLine","FREEHAND_POLYLINE","freehandPolyline","drawPolygon","POLYGON","polygon","drawFreehandPolygon","FREEHAND_POLYGON","freehandPolygon","publish","enableStopButtons","connectMapClick","disableStopButtons","onDrawToolbarDrawEnd","evt","deactivate","currentDrawModeNone","graphic","geometry","add","ren","clearGraphics","endDrawing","stopDrawing","clear","stopDrawingButton","set","eraseDrawingButton","noGraphics","graphics","length","setMapClickMode"],"mappings":"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","file":"Draw.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dijit/_WidgetsInTemplateMixin',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/Color',\r\n    'esri/toolbars/draw',\r\n    'esri/layers/GraphicsLayer',\r\n    'esri/graphic',\r\n    'esri/renderers/SimpleRenderer',\r\n    'dojo/text!./Draw/templates/Draw.html',\r\n    'esri/renderers/UniqueValueRenderer',\r\n    'esri/symbols/SimpleMarkerSymbol',\r\n    'esri/symbols/SimpleLineSymbol',\r\n    'esri/symbols/SimpleFillSymbol',\r\n    'esri/layers/FeatureLayer',\r\n    'dojo/topic',\r\n    'dojo/aspect',\r\n    'dojo/i18n!./Draw/nls/resource',\r\n\r\n    'dijit/form/Button',\r\n    'xstyle/css!./Draw/css/Draw.css',\r\n    'xstyle/css!./Draw/css/adw-icons.css'\r\n], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, lang, Color, Draw, GraphicsLayer, Graphic, SimpleRenderer, drawTemplate, UniqueValueRenderer, SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol, FeatureLayer, topic, aspect, i18n) {\r\n\r\n    // main draw dijit\r\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n        widgetsInTemplate: true,\r\n        templateString: drawTemplate,\r\n        i18n: i18n,\r\n        drawToolbar: null,\r\n        mapClickMode: null,\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this.drawToolbar = new Draw(this.map);\r\n            this.drawToolbar.on('draw-end', lang.hitch(this, 'onDrawToolbarDrawEnd'));\r\n\r\n            this.createGraphicLayers();\r\n\r\n            this.own(topic.subscribe('mapClickMode/currentSet', lang.hitch(this, 'setMapClickMode')));\r\n            if (this.parentWidget && this.parentWidget.toggleable) {\r\n                this.own(aspect.after(this.parentWidget, 'toggle', lang.hitch(this, function () {\r\n                    this.onLayoutChange(this.parentWidget.open);\r\n                })));\r\n            }\r\n        },\r\n        createGraphicLayers: function () {\r\n            this.pointSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 10, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, new Color([255, 0, 0]), 1), new Color([255, 0, 0, 1.0]));\r\n            this.polylineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 1);\r\n            this.polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new Color([255, 0, 0]), 2), new Color([255, 255, 0, 0.0]));\r\n            this.pointGraphics = new GraphicsLayer({\r\n                id: 'drawGraphics_point',\r\n                title: 'Draw Graphics'\r\n            });\r\n            this.pointRenderer = new SimpleRenderer(this.pointSymbol);\r\n            this.pointRenderer.label = 'User drawn points';\r\n            this.pointRenderer.description = 'User drawn points';\r\n            this.pointGraphics.setRenderer(this.pointRenderer);\r\n            this.map.addLayer(this.pointGraphics);\r\n            this.polylineGraphics = new GraphicsLayer({\r\n                id: 'drawGraphics_line',\r\n                title: 'Draw Graphics'\r\n            });\r\n            this.polylineRenderer = new SimpleRenderer(this.polylineSymbol);\r\n            this.polylineRenderer.label = 'User drawn lines';\r\n            this.polylineRenderer.description = 'User drawn lines';\r\n            this.polylineGraphics.setRenderer(this.polylineRenderer);\r\n            this.map.addLayer(this.polylineGraphics);\r\n\r\n            this.polygonGraphics = new FeatureLayer({\r\n                layerDefinition: {\r\n                    geometryType: 'esriGeometryPolygon',\r\n                    fields: [{\r\n                        name: 'OBJECTID',\r\n                        type: 'esriFieldTypeOID',\r\n                        alias: 'OBJECTID',\r\n                        domain: null,\r\n                        editable: false,\r\n                        nullable: false\r\n                    }, {\r\n                        name: 'ren',\r\n                        type: 'esriFieldTypeInteger',\r\n                        alias: 'ren',\r\n                        domain: null,\r\n                        editable: true,\r\n                        nullable: false\r\n                    }]\r\n                },\r\n                featureSet: null\r\n            }, {\r\n                id: 'drawGraphics_poly',\r\n                title: 'Draw Graphics',\r\n                mode: FeatureLayer.MODE_SNAPSHOT\r\n            });\r\n            this.polygonRenderer = new UniqueValueRenderer(new SimpleFillSymbol(), 'ren', null, null, ', ');\r\n            this.polygonRenderer.addValue({\r\n                value: 1,\r\n                symbol: new SimpleFillSymbol({\r\n                    color: [255, 170, 0, 255],\r\n                    outline: {\r\n                        color: [255, 170, 0, 255],\r\n                        width: 1,\r\n                        type: 'esriSLS',\r\n                        style: 'esriSLSSolid'\r\n                    },\r\n                    type: 'esriSFS',\r\n                    style: 'esriSFSForwardDiagonal'\r\n                }),\r\n                label: 'User drawn polygons',\r\n                description: 'User drawn polygons'\r\n            });\r\n            this.polygonGraphics.setRenderer(this.polygonRenderer);\r\n            this.map.addLayer(this.polygonGraphics);\r\n        },\r\n        drawPoint: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.POINT);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.point;\r\n        },\r\n        drawCircle: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.CIRCLE);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.circle;\r\n        },\r\n        drawLine: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.POLYLINE);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.polyline;\r\n        },\r\n        drawFreehandLine: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.FREEHAND_POLYLINE);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.freehandPolyline;\r\n        },\r\n        drawPolygon: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.POLYGON);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.polygon;\r\n        },\r\n        drawFreehandPolygon: function () {\r\n            this.disconnectMapClick();\r\n            this.drawToolbar.activate(Draw.FREEHAND_POLYGON);\r\n            this.drawModeTextNode.innerText = this.i18n.labels.freehandPolygon;\r\n        },\r\n        disconnectMapClick: function () {\r\n            topic.publish('mapClickMode/setCurrent', 'draw');\r\n            this.enableStopButtons();\r\n        // dojo.disconnect(this.mapClickEventHandle);\r\n        // this.mapClickEventHandle = null;\r\n        },\r\n        connectMapClick: function () {\r\n            topic.publish('mapClickMode/setDefault');\r\n            this.disableStopButtons();\r\n        // if (this.mapClickEventHandle === null) {\r\n        //     this.mapClickEventHandle = dojo.connect(this.map, 'onClick', this.mapClickEventListener);\r\n        // }\r\n        },\r\n        onDrawToolbarDrawEnd: function (evt) {\r\n            this.drawToolbar.deactivate();\r\n            this.drawModeTextNode.innerText = this.i18n.labels.currentDrawModeNone;\r\n            var graphic;\r\n            switch (evt.geometry.type) {\r\n            case 'point':\r\n                graphic = new Graphic(evt.geometry);\r\n                this.pointGraphics.add(graphic);\r\n                break;\r\n            case 'polyline':\r\n                graphic = new Graphic(evt.geometry);\r\n                this.polylineGraphics.add(graphic);\r\n                break;\r\n            case 'polygon':\r\n                graphic = new Graphic(evt.geometry, null, {\r\n                    ren: 1\r\n                });\r\n                this.polygonGraphics.add(graphic);\r\n                break;\r\n            default:\r\n            }\r\n            this.connectMapClick();\r\n        },\r\n        clearGraphics: function () {\r\n            this.endDrawing();\r\n            this.connectMapClick();\r\n            this.drawModeTextNode.innerText = 'None';\r\n        },\r\n        stopDrawing: function () {\r\n            this.drawToolbar.deactivate();\r\n            this.drawModeTextNode.innerText = 'None';\r\n            this.connectMapClick();\r\n        },\r\n        endDrawing: function () {\r\n            this.pointGraphics.clear();\r\n            this.polylineGraphics.clear();\r\n            this.polygonGraphics.clear();\r\n            this.drawToolbar.deactivate();\r\n            this.disableStopButtons();\r\n        },\r\n        disableStopButtons: function () {\r\n            this.stopDrawingButton.set('disabled', true);\r\n            this.eraseDrawingButton.set('disabled', !this.noGraphics());\r\n        },\r\n        enableStopButtons: function () {\r\n            this.stopDrawingButton.set('disabled', false);\r\n            this.eraseDrawingButton.set('disabled', !this.noGraphics());\r\n        },\r\n        noGraphics: function () {\r\n\r\n            if (this.pointGraphics.graphics.length > 0) {\r\n                return true;\r\n            } else if (this.polylineGraphics.graphics.length > 0) {\r\n                return true;\r\n            } else if (this.polygonGraphics.graphics.length > 0) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        },\r\n        onLayoutChange: function (open) {\r\n            // end drawing on close of title pane\r\n            if (!open) {\r\n                //this.endDrawing();\r\n                if (this.mapClickMode === 'draw') {\r\n                    topic.publish('mapClickMode/setDefault');\r\n                }\r\n            }\r\n        },\r\n        setMapClickMode: function (mode) {\r\n            this.mapClickMode = mode;\r\n        }\r\n    });\r\n});"]}