{"version":3,"sources":["StreetView.js"],"names":["define","declare","_WidgetBase","_TemplatedMixin","_WidgetsInTemplateMixin","lang","aspect","topic","GraphicsLayer","Graphic","SimpleRenderer","template","PictureMarkerSymbol","domStyle","domGeom","Point","SpatialReference","MenuItem","proj4","i18n","Google","google","widgetsInTemplate","templateString","mapClickMode","panoOptions","proj4BaseURL","proj4Catalog","proj4CustomURL","postCreate","this","inherited","arguments","load","hitch","g","addressControlOptions","position","maps","ControlPosition","TOP_RIGHT","linksControl","panControl","zoomControlOptions","style","ZoomControlStyle","SMALL","enableCloseButton","createGraphicsLayer","map","on","own","subscribe","parentWidget","toggleable","after","onLayoutChange","open","id","window","mapRightClickMenu","addRightClickMenu","pointSymbol","require","toUrl","pointGraphics","title","pointRenderer","label","description","setRenderer","addLayer","evt","mapRightClickPoint","mapPoint","addChild","rightClickMenuItem","onClick","onOpen","show","panorama","panoramaService","StreetViewPanorama","panoNode","StreetViewService","onClose","hide","connectMapClick","placePoint","streetViewButtonDijit","get","disconnectMapClick","set","setMapCursor","publish","clearGraphics","clear","noStreetViewResults","enableStreetViewClick","disableStreetViewClick","getStreetView","overRide","toggle","geometry","wkid","spatialReference","key","String","defs","url","projPoint","inverse","x","y","streetViewInstructions","getPanoramaLocation","setPanoPlace","geoPoint","place","LatLng","getPanoramaByLocation","event","addListener","getPanoramaByLocationComplete","StreetViewPanoramaData","StreetViewStatus","firstSet","setPosition","source","error","resize","options","h","setContentSize","containerNode","trigger","setPlaceMarkerPosition","placeMarker","graphics","length","add","panoPosition","getPosition","positionLat","lat","positionLong","lng","isNaN","xy","forward","point","setGeometry","heading","spherical","computeHeading","setPov","pitch","setTimeout","setPlaceMarkerRotation","pov","getPov","setAngle","refresh","streetViewFromMapRightClick","setMapClickMode","mode"],"mappings":"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","file":"StreetView.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dijit/_WidgetBase',\r\n    'dijit/_TemplatedMixin',\r\n    'dijit/_WidgetsInTemplateMixin',\r\n    'dojo/_base/lang',\r\n    'dojo/aspect',\r\n    'dojo/topic',\r\n    'esri/layers/GraphicsLayer',\r\n    'esri/graphic',\r\n    'esri/renderers/SimpleRenderer',\r\n    'dojo/text!./StreetView/templates/StreetView.html',\r\n    'esri/symbols/PictureMarkerSymbol',\r\n    'dojo/dom-style',\r\n    'dojo/dom-geometry',\r\n    'esri/geometry/Point',\r\n    'esri/SpatialReference',\r\n    'dijit/MenuItem',\r\n    'proj4js/proj4',\r\n    'dojo/i18n!./StreetView/nls/resource',\r\n    'gis/plugins/Google',\r\n    'dijit/form/ToggleButton',\r\n    'xstyle/css!./StreetView/css/StreetView.css'\r\n], function (declare, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, lang, aspect, topic, GraphicsLayer, Graphic, SimpleRenderer, template, PictureMarkerSymbol, domStyle, domGeom, Point, SpatialReference, MenuItem, proj4, i18n, Google) {\r\n    //cache google so\r\n    var google;\r\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n        widgetsInTemplate: true,\r\n        templateString: template,\r\n        i18n: i18n,\r\n        mapClickMode: null,\r\n\r\n        panoOptions: null,\r\n\r\n        // in case this changes some day\r\n        proj4BaseURL: 'https://epsg.io/',\r\n\r\n        //  options are ESRI, EPSG and SR-ORG\r\n        // See http://sepsg.io/ for more information\r\n        proj4Catalog: 'EPSG',\r\n\r\n        // if desired, you can load a projection file from your server\r\n        // instead of using one from epsg.io\r\n        // i.e., http://server/projections/102642.js\r\n        proj4CustomURL: null,\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            //load the google api asynchronously\r\n            Google.load(lang.hitch(this, function (g) {\r\n                //store a reference to google\r\n                google = g;\r\n\r\n                //init our panoOptions since they depend on google\r\n                this.panoOptions = {\r\n                    addressControlOptions: {\r\n                        position: google.maps.ControlPosition.TOP_RIGHT\r\n                    },\r\n                    linksControl: false,\r\n                    panControl: false,\r\n                    zoomControlOptions: {\r\n                        style: google.maps.ZoomControlStyle.SMALL\r\n                    },\r\n                    enableCloseButton: false\r\n                };\r\n                this.createGraphicsLayer();\r\n                this.map.on('click', lang.hitch(this, 'getStreetView'));\r\n\r\n                this.own(topic.subscribe('mapClickMode/currentSet', lang.hitch(this, 'setMapClickMode')));\r\n\r\n                if (this.parentWidget) {\r\n                    if (this.parentWidget.toggleable) {\r\n                        this.own(aspect.after(this.parentWidget, 'toggle', lang.hitch(this, function () {\r\n                            this.onLayoutChange(this.parentWidget.open);\r\n                        })));\r\n                    }\r\n                    this.own(aspect.after(this.parentWidget, 'resize', lang.hitch(this, 'resize')));\r\n                    this.own(topic.subscribe(this.parentWidget.id + '/resize/resize', lang.hitch(this, 'resize')));\r\n                }\r\n\r\n                if (!window.proj4) {\r\n                    window.proj4 = proj4;\r\n                }\r\n\r\n                if (this.mapRightClickMenu) {\r\n                    this.addRightClickMenu();\r\n                }\r\n            }));\r\n        },\r\n        createGraphicsLayer: function () {\r\n            this.pointSymbol = new PictureMarkerSymbol(require.toUrl('gis/dijit/StreetView/images/blueArrow.png'), 30, 30);\r\n            this.pointGraphics = new GraphicsLayer({\r\n                id: 'streetview_graphics',\r\n                title: 'Street View'\r\n            });\r\n            this.pointRenderer = new SimpleRenderer(this.pointSymbol);\r\n            this.pointRenderer.label = 'Street View';\r\n            this.pointRenderer.description = 'Street View';\r\n            this.pointGraphics.setRenderer(this.pointRenderer);\r\n            this.map.addLayer(this.pointGraphics);\r\n        },\r\n        addRightClickMenu: function () {\r\n            this.map.on('MouseDown', lang.hitch(this, function (evt) {\r\n                this.mapRightClickPoint = evt.mapPoint;\r\n            }));\r\n            this.mapRightClickMenu.addChild(new MenuItem({\r\n                label: this.i18n.rightClickMenuItem.label,\r\n                onClick: lang.hitch(this, 'streetViewFromMapRightClick')\r\n            }));\r\n        },\r\n        onOpen: function () {\r\n            this.pointGraphics.show();\r\n            if (!this.panorama || !this.panoramaService) {\r\n                this.panorama = new google.maps.StreetViewPanorama(this.panoNode, this.panoOptions);\r\n                this.panoramaService = new google.maps.StreetViewService();\r\n            }\r\n        },\r\n        onClose: function () {\r\n            // end streetview on close of title pane\r\n            this.pointGraphics.hide();\r\n            if (this.mapClickMode === 'streetview') {\r\n                this.connectMapClick();\r\n            }\r\n        },\r\n        onLayoutChange: function (open) {\r\n            if (open) {\r\n                this.onOpen();\r\n            } else {\r\n                this.onClose();\r\n            }\r\n        },\r\n        placePoint: function () {\r\n            if (this.streetViewButtonDijit.get('checked')) {\r\n                this.disconnectMapClick();\r\n            } else {\r\n                this.connectMapClick();\r\n            }\r\n            //get map click, set up listener in post create\r\n        },\r\n        disconnectMapClick: function () {\r\n            this.streetViewButtonDijit.set('checked', true);\r\n            this.map.setMapCursor('crosshair');\r\n            topic.publish('mapClickMode/setCurrent', 'streetview');\r\n        },\r\n        connectMapClick: function () {\r\n            this.streetViewButtonDijit.set('checked', false);\r\n            this.map.setMapCursor('auto');\r\n            topic.publish('mapClickMode/setDefault');\r\n        },\r\n        clearGraphics: function () {\r\n            this.pointGraphics.clear();\r\n            domStyle.set(this.noStreetViewResults, 'display', 'block');\r\n        },\r\n        enableStreetViewClick: function () {\r\n            this.disconnectMapClick();\r\n        },\r\n        disableStreetViewClick: function () {\r\n            this.connectMapClick();\r\n        },\r\n        getStreetView: function (evt, overRide) {\r\n            if (this.mapClickMode === 'streetview' || overRide) {\r\n                var mapPoint = evt.mapPoint;\r\n                if (!mapPoint) {\r\n                    return;\r\n                }\r\n\r\n                if (this.parentWidget && !this.parentWidget.open) {\r\n                    this.parentWidget.toggle();\r\n                }\r\n\r\n                // convert the map point's coordinate system into lat/long\r\n                var geometry = null,\r\n                    wkid = mapPoint.spatialReference.wkid;\r\n                if (wkid === 102100) {\r\n                    wkid = 3857;\r\n                }\r\n                var key = this.proj4Catalog + ':' + String(wkid);\r\n                if (!proj4.defs[key]) {\r\n                    var url = this.proj4CustomURL || this.proj4BaseURL + String(wkid) + '.js';\r\n                    require([url], lang.hitch(this, 'getStreetView', evt, true));\r\n                    return;\r\n                }\r\n                // only need one projection as we are\r\n                // converting to WGS84 lat/long\r\n                var projPoint = proj4(proj4.defs[key]).inverse([mapPoint.x, mapPoint.y]);\r\n                if (projPoint) {\r\n                    geometry = {\r\n                        x: projPoint[0],\r\n                        y: projPoint[1]\r\n                    };\r\n                }\r\n\r\n                domStyle.set(this.streetViewInstructions, 'display', 'none');\r\n                if (geometry) {\r\n                    domStyle.set(this.noStreetViewResults, 'display', 'none');\r\n                    this.getPanoramaLocation(geometry);\r\n                } else {\r\n                    this.setPanoPlace = null;\r\n                    this.clearGraphics();\r\n                    domStyle.set(this.noStreetViewResults, 'display', 'block');\r\n                }\r\n            }\r\n\r\n        },\r\n        getPanoramaLocation: function (geoPoint) {\r\n            var place = new google.maps.LatLng(geoPoint.y, geoPoint.x);\r\n            this.panoramaService.getPanoramaByLocation(place, 50, lang.hitch(this, 'getPanoramaByLocationComplete', geoPoint));\r\n            // Panorama Events -- Changed location\r\n            google.maps.event.addListener(this.panorama, 'position_changed', lang.hitch(this, 'setPlaceMarkerPosition'));\r\n            // Panorama Events -- Changed Rotation\r\n            google.maps.event.addListener(this.panorama, 'pov_changed', lang.hitch(this, 'setPlaceMarkerRotation'));\r\n        },\r\n        getPanoramaByLocationComplete: function (geoPoint, StreetViewPanoramaData, StreetViewStatus) {\r\n            if (StreetViewStatus === 'OK') {\r\n                this.disableStreetViewClick();\r\n                var place = new google.maps.LatLng(geoPoint.y, geoPoint.x);\r\n                this.setPanoPlace = place;\r\n                this.firstSet = true;\r\n                this.panorama.setPosition(place);\r\n            } else if (StreetViewStatus === 'ZERO_RESULTS') {\r\n                this.setPanoPlace = null;\r\n                this.clearGraphics();\r\n                // reset default map click mode\r\n                this.connectMapClick();\r\n                domStyle.set(this.noStreetViewResults, 'display', 'block');\r\n            } else {\r\n                this.setPanoPlace = null;\r\n                this.clearGraphics();\r\n                topic.publish('viewer/handleError', {\r\n                    source: 'StreetView',\r\n                    error: 'Unknown.'\r\n                });\r\n            }\r\n        },\r\n        resize: function (options) {\r\n            if (options && options.h) {\r\n                domGeom.setContentSize(this.containerNode, {\r\n                    h: (options.h - 2)\r\n                });\r\n            }\r\n            if (this.panorama) {\r\n                google.maps.event.trigger(this.panorama, 'resize');\r\n            }\r\n        },\r\n        setPlaceMarkerPosition: function () {\r\n            if (!this.placeMarker || this.pointGraphics.graphics.length === 0) {\r\n                this.placeMarker = new Graphic();\r\n                // Add graphic to the map\r\n                this.pointGraphics.add(this.placeMarker);\r\n            }\r\n            // get the new lat/long from streetview\r\n            var panoPosition = this.panorama.getPosition();\r\n            var positionLat = panoPosition.lat();\r\n            var positionLong = panoPosition.lng();\r\n            // Make sure they are numbers\r\n            if (!isNaN(positionLat) && !isNaN(positionLong)) {\r\n                // convert the resulting lat/long to the map's spatial reference\r\n                var xy = null,\r\n                    wkid = this.map.spatialReference.wkid;\r\n                if (wkid === 102100) {\r\n                    wkid = 3857;\r\n                }\r\n                var key = this.proj4Catalog + ':' + String(wkid);\r\n                if (!proj4.defs[key]) {\r\n                    var url = this.proj4CustomURL || this.proj4BaseURL + String(wkid) + '.js';\r\n                    require([url], lang.hitch(this, 'setPlaceMarkerPosition'));\r\n                    return;\r\n                }\r\n                // only need the one projection as we are\r\n                // converting from WGS84 lat/long\r\n                xy = proj4(proj4.defs[key]).forward([positionLong, positionLat]);\r\n                if (xy) {\r\n                    var point = new Point(xy, new SpatialReference({\r\n                        wkid: wkid\r\n                    }));\r\n\r\n                    // change point position on the map\r\n                    this.placeMarker.setGeometry(point);\r\n                    if (this.setPanoPlace && !this.firstSet) {\r\n                        var heading = google.maps.geometry.spherical.computeHeading(panoPosition, this.setPanoPlace);\r\n                        this.panorama.setPov({\r\n                            heading: heading,\r\n                            pitch: 0\r\n                        });\r\n                        setTimeout(lang.hitch(this, function () {\r\n                            this.setPanoPlace = null;\r\n                        }), 1000);\r\n                    } else {\r\n                        this.firstSet = false;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        setPlaceMarkerRotation: function () {\r\n            if (this.placeMarker) {\r\n                var pov = this.panorama.getPov();\r\n                this.pointSymbol.setAngle(pov.heading);\r\n                this.pointGraphics.refresh();\r\n            }\r\n        },\r\n        streetViewFromMapRightClick: function () {\r\n            var evt = {\r\n                mapPoint: this.mapRightClickPoint\r\n            };\r\n            this.getStreetView(evt, true);\r\n        },\r\n        setMapClickMode: function (mode) {\r\n            this.mapClickMode = mode;\r\n        }\r\n    });\r\n});\r\n"]}