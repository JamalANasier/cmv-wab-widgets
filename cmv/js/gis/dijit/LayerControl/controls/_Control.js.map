{"version":3,"sources":["_Control.js"],"names":["define","declare","lang","array","on","topic","domConst","domStyle","domClass","domAttr","fx","html","LayerMenu","template","_Control","templateString","controller","layer","layerTitle","controlOptions","layerMenu","icons","_reorderUp","_reorderDown","_scaleRangeHandler","_expandClickHandler","constructor","params","this","_handlers","postCreate","inherited","arguments","loaded","_initialize","push","hitch","publish","source","error","destroy","_layerTypePreInit","_setLayerCheckbox","checkNode","set","labelNode","noMenu","control","contextMenuForWindow","targetNodeIds","menuNode","leftClickToOpen","startup","remove","menu","menuClickNode","minScale","maxScale","_checkboxScaleRange","getMap","_layerTypeInit","expanded","sublayers","expandClickNode","click","_expandClick","_expandClicked","i","expandNode","iconNode","expandIconNode","get","wipeIn","node","duration","play","replace","collapse","expand","wipeOut","_expandRemove","_setLayerVisibility","visible","hide","id","show","checked","unchecked","scale","getScale","min","max","add","_scaleRangeChange","handlerIndex","indexOf","splice","handlerIndex2","_updateStart","layerUpdateNode","_layerState","clone","visibleLayers","_updateEnd","_visibilityChange","r","forEach","h"],"mappings":"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","file":"_Control.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/lang',\r\n    'dojo/_base/array',\r\n    'dojo/on',\r\n    'dojo/topic',\r\n    'dojo/dom-construct',\r\n    'dojo/dom-style',\r\n    'dojo/dom-class',\r\n    'dojo/dom-attr',\r\n    'dojo/fx',\r\n    'dojo/html',\r\n    './../plugins/LayerMenu',\r\n    'dojo/text!./templates/Control.html'\r\n], function (\r\n    declare,\r\n    lang,\r\n    array,\r\n    on,\r\n    topic,\r\n    domConst,\r\n    domStyle,\r\n    domClass,\r\n    domAttr,\r\n    fx,\r\n    html,\r\n    LayerMenu,\r\n    template\r\n) {\r\n    var _Control = declare([], {\r\n        templateString: template, // widget template\r\n        controller: null, // LayerControl instance\r\n        layer: null, // the layer object\r\n        layerTitle: 'Layer Title', // default title\r\n        controlOptions: null, // control options\r\n        layerMenu: null, //the controls menu\r\n        icons: null,\r\n        _reorderUp: null, // used by LayerMenu\r\n        _reorderDown: null, // used by LayerMenu\r\n        _scaleRangeHandler: null, // handle for scale range awareness\r\n        _expandClickHandler: null, // the click handler for the expandNode\r\n        constructor: function (params) {\r\n            if (params.controller) {\r\n                this.icons = params.controller.icons;\r\n            } // if not you've got bigger problems\r\n            this._handlers = [];\r\n        },\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            if (!this.controller) {\r\n                topic.publish('viewer/handleError', {\r\n                    source: 'LayerControl/_Control',\r\n                    error: 'controller option is required'\r\n                });\r\n                this.destroy();\r\n                return;\r\n            }\r\n            if (!this.layer) {\r\n                topic.publish('viewer/handleError', {\r\n                    source: 'LayerControl/_Control',\r\n                    error: 'layer option is required'\r\n                });\r\n                this.destroy();\r\n                return;\r\n            }\r\n\r\n            if (this.layer.loaded) {\r\n                this._initialize();\r\n            } else {\r\n                this._handlers.push(this.layer.on('load', lang.hitch(this, '_initialize')));\r\n            }\r\n        },\r\n        // initialize the control\r\n        _initialize: function () {\r\n            // an optional function in each control widget called before widget init\r\n            if (this._layerTypePreInit) {\r\n                this._layerTypePreInit();\r\n            }\r\n            var layer = this.layer,\r\n                controlOptions = this.controlOptions;\r\n            // set checkbox\r\n            this._setLayerCheckbox(layer, this.checkNode);\r\n            // set title\r\n            html.set(this.labelNode, this.layerTitle);\r\n            // create layer menu\r\n            if ((controlOptions.noMenu !== true && this.controller.noMenu !== true) || (this.controller.noMenu === true && controlOptions.noMenu === false)) {\r\n                this.layerMenu = new LayerMenu({\r\n                    control: this,\r\n                    contextMenuForWindow: false,\r\n                    targetNodeIds: [this.menuNode],\r\n                    leftClickToOpen: true\r\n                });\r\n                this.layerMenu.startup();\r\n            } else {\r\n                domClass.remove(this.menuNode, 'fa, layerControlMenuIcon, ' + this.icons.menu);\r\n                domStyle.set(this.menuClickNode, 'cursor', 'default');\r\n            }\r\n            // if layer has scales set\r\n            if (layer.minScale !== 0 || layer.maxScale !== 0) {\r\n                this._checkboxScaleRange();\r\n                this._scaleRangeHandler = layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\r\n            }\r\n            // a function in each control widget for layer type specifics like legends and such\r\n            this._layerTypeInit();\r\n            // show expandNode\r\n            //   no harm if click handler wasn't created\r\n            if (controlOptions.expanded && controlOptions.sublayers) {\r\n                this.expandClickNode.click();\r\n            }\r\n            // esri layer's don't inherit from Stateful\r\n            //   connect to update events to handle \"watching\" layers\r\n            this._handlers.push(\r\n                on(this.checkNode, 'click', lang.hitch(this, '_setLayerVisibility', layer, this.checkNode)),\r\n                layer.on('scale-range-change', lang.hitch(this, '_scaleRangeChange')),\r\n                layer.on('update-start', lang.hitch(this, '_updateStart')),\r\n                layer.on('update-end', lang.hitch(this, '_updateEnd')),\r\n                layer.on('visibility-change', lang.hitch(this, '_visibilityChange'))\r\n            );\r\n        },\r\n        // add on event to expandClickNode\r\n        _expandClick: function () {\r\n            this._expandClickHandler = on(this.expandClickNode, 'click', lang.hitch(this, '_expandClicked'));\r\n            this._handlers.push(this._expandClickHandler);\r\n        },\r\n        _expandClicked: function () {\r\n            var i = this.icons,\r\n                expandNode = this.expandNode,\r\n                iconNode = this.expandIconNode;\r\n            if (domStyle.get(expandNode, 'display') === 'none') {\r\n                fx.wipeIn({\r\n                    node: expandNode,\r\n                    duration: 300\r\n                }).play();\r\n                domClass.replace(iconNode, i.collapse, i.expand);\r\n            } else {\r\n                fx.wipeOut({\r\n                    node: expandNode,\r\n                    duration: 300\r\n                }).play();\r\n                domClass.replace(iconNode, i.expand, i.collapse);\r\n            }\r\n        },\r\n        // removes the icons and cursor:pointer from expandClickNode and destroys expandNode\r\n        _expandRemove: function () {\r\n            domClass.remove(this.expandIconNode, ['fa', this.icons.expand, 'layerControlToggleIcon']);\r\n            domStyle.set(this.expandClickNode, 'cursor', 'default');\r\n            domConst.destroy(this.expandNode);\r\n        },\r\n        // set layer visibility and update icon\r\n        _setLayerVisibility: function (layer, checkNode) {\r\n            if (layer.visible) {\r\n                this._setLayerCheckbox(layer, checkNode);\r\n                layer.hide();\r\n                topic.publish('layerControl/layerToggle', {\r\n                    id: layer.id,\r\n                    visible: layer.visible\r\n                });\r\n            } else {\r\n                this._setLayerCheckbox(layer, checkNode);\r\n                layer.show();\r\n                topic.publish('layerControl/layerToggle', {\r\n                    id: layer.id,\r\n                    visible: layer.visible\r\n                });\r\n            }\r\n            if (layer.minScale !== 0 || layer.maxScale !== 0) {\r\n                this._checkboxScaleRange();\r\n            }\r\n        },\r\n        // set checkbox based on layer so it's always in sync\r\n        _setLayerCheckbox: function (layer, checkNode) {\r\n            var i = this.icons;\r\n            if (layer.visible) {\r\n                domAttr.set(checkNode, 'data-checked', 'checked');\r\n                domClass.replace(checkNode, i.checked, i.unchecked);\r\n            } else {\r\n                domAttr.set(checkNode, 'data-checked', 'unchecked');\r\n                domClass.replace(checkNode, i.unchecked, i.checked);\r\n            }\r\n        },\r\n        // check scales and add/remove disabled classes from checkbox\r\n        _checkboxScaleRange: function () {\r\n            var node = this.checkNode,\r\n                layer = this.layer,\r\n                scale = layer.getMap().getScale(),\r\n                min = layer.minScale,\r\n                max = layer.maxScale;\r\n            domClass.remove(node, 'layerControlCheckIconOutScale');\r\n            if ((min !== 0 && scale > min) || (max !== 0 && scale < max)) {\r\n                domClass.add(node, 'layerControlCheckIconOutScale');\r\n            }\r\n        },\r\n        _scaleRangeChange: function () {\r\n            if (this.layer.minScale !== 0 || this.layer.maxScale !== 0) {\r\n                this._checkboxScaleRange();\r\n                if (this._scaleRangeHandler) {\r\n                    var handlerIndex = array.indexOf(this._handlers, this._scaleRangeHandler);\r\n                    if (handlerIndex !== -1) {\r\n                        this._handlers[handlerIndex].remove();\r\n                        this._handlers.splice(handlerIndex, 1);\r\n                    }\r\n                }\r\n                this._scaleRangeHandler = this.layer.getMap().on('zoom-end', lang.hitch(this, '_checkboxScaleRange'));\r\n                this._handlers.push(this._scaleRangeHandler);\r\n            } else {\r\n                this._checkboxScaleRange();\r\n                if (this._scaleRangeHandler) {\r\n                    var handlerIndex2 = array.indexOf(this._handlers, this._scaleRangeHandler);\r\n                    if (handlerIndex2 !== -1) {\r\n                        this._handlers[handlerIndex2].remove();\r\n                        this._handlers.splice(handlerIndex2, 1);\r\n                    }\r\n                    this._scaleRangeHandler = null;\r\n                }\r\n            }\r\n        },\r\n        // anything the widget may need to do before update\r\n        _updateStart: function () {\r\n            domStyle.set(this.layerUpdateNode, 'display', 'inline-block'); //font awesome display\r\n            // clone a layer state before layer updates for use after update\r\n            this._layerState = lang.clone({\r\n                visible: this.layer.visible,\r\n                visibleLayers: this.layer.visibleLayers || null\r\n            });\r\n        },\r\n        // anything the widget may need to do after update\r\n        _updateEnd: function () {\r\n            domStyle.set(this.layerUpdateNode, 'display', 'none');\r\n            // how to handle external layer.setVisibleLayers() ???\r\n            //\r\n            // without topics to get/set sublayer state this will be challenging\r\n            // still up for debate...\r\n\r\n            // anything needing before update layer state\r\n            if (!this._layerState) {\r\n                // clear\r\n                this._layerState = null;\r\n                return;\r\n            }\r\n        },\r\n        // anything the widget may need to do after visibility change\r\n        _visibilityChange: function (r) {\r\n            // if the checkbox doesn't match layer visibility correct it by calling _setLayerCheckbox\r\n            if ((r.visible && domAttr.get(this.checkNode, 'data-checked') === 'unchecked') || (!r.visible && domAttr.get(this.checkNode, 'data-checked') === 'checked')) {\r\n                this._setLayerCheckbox(this.layer, this.checkNode);\r\n            }\r\n        },\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n            this._handlers.forEach(function (h) {\r\n                h.remove();\r\n            });\r\n        }\r\n    });\r\n    return _Control;\r\n});"]}